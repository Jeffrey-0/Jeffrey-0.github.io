[{"title":"git常用命令","url":"/2020/08/03/2020-04-22-git-command/","content":"\n\n\n本文转自[Git常用命令及方法大全]，不过由于里面命令太多，着重挑选了我认为较常用的，虽然也不少\n\n\n\n## 新建代码库\n\n```shell\n# 在当前目录新建一个Git代码库\n$ git init \n\n# 下载一个远程项目\n$ git clone [url]\n```\n<!-- more -->\n## 配置\n\n```shell\n# 显示当前的git配置\n$ git config --list\n\n# 设置提交代码时的用户信息（通常设置全局--global）\n$ git config --global user.name \"name\"\n$ git config --global user.email \"email address\"\n```\n\n## 增加删除文件\n\n```shell\n#  添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录所有文件到暂存区\n$ git add .\n\n# 删除工作区文件，并将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 删除暂存区中的文件，但该文件会保留在工作区\n$ git rm --cache [file]\n\n# 改名文件，并放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n\n```shell\n# 提交暂存区到本地仓库区，message：备注\n$ git commit -m [message]\n\n# 使用新的commit，替代上一次提交\n$ git commit --amend -m [message]\n```\n\n## 分支\n\n```shell\n# 列出所有本地分支\n$ git branch \n\n# 列出所有远程分支\n$ git branch -r \n\n# 列出所有本地分支和远程分支\n$ git branch -a \n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n#切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 合并指定分区到当前分区\n$ git merge [branch]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n# 切换分支后直接不能直接git push\n$ git push --set-upstream origin [branch-name]\n```\n\n## 标签\n\n```shell\n# 列出所有tag\n$ git tag\n\n# 新建一个tag 在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git tag -d [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n```\n\n## 查看信息\n\n```shell\n# 显示有变更的文件\n$ git status\n\n# 显示当给前分支的版本历史\n$ git log\n\n# 显示commit历史\n$ git log --stat\n\n# 信息太多，按Q可以退出log\n```\n\n## 远程同步\n\n```shell\n# 下载远程仓库所有改动\n$ git fetch [remote]\n\n# 将本地仓库和远程仓库关联\n$ git remote add orign [url]\n\n# 取回远程仓库的变化，并和本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## 撤销\n\n```shell\n# 恢复暂存区的指定文件到工作区\n$ git checkout -- [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区和工作区，与上次commit保持一致\n$ git reset --hard\n\n```\n\n## 版本回退和撤销（重点）\n\n```shell\n# 工作区修改，但是未add，想恢复工作区的文件\n$ git checkout -- [file]\n\n# 工作区修改，未add，恢复工作区文件\n# 工作区修改+add，清空暂存区中某个文件\n$ git restore [file]\n\n# 工作区修改+add，未commit，清空暂存区中某个文件\n$ git reset HEAD [file] \n\n# 工作区修改+add，未commit，清空暂存区并还原工作区\n$ git reset --hard\n\n# 已经commit或push了\n# 先查看日志，看看自己要回到版本几，~1表示回退上个版本,还原三区（本地仓库、缓存区、工作区）\n$ git log --pretty=oneline\n$ git reset --hard HEAD~1\n\n# 恢复文件后又想回到修改后的文件.\n$ git log --pretty=oneline\n$ git reset --hard [commit_id]\n\n```\n\n[Git常用命令及方法大全]:https://blog.csdn.net/web_csdn_share/article/details/79243308\n\n","tags":["antic","git"],"categories":["笔记"]},{"title":"Hello World","url":"/2020/08/02/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n<!-- more -->\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]