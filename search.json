[{"title":"CSS预处理器-Sass","url":"/2020/08/09/2020-08-09-Sass笔记/","content":"\n学习视频：[Sass和Less开发](https://www.bilibili.com/video/BV15a4y1v7Yv)\n\n## 介绍\n\n> Sass时一款强化CSS的辅助工具,采用Ruby语言编写的一款CSS预处理器，诞生于2007年，是最大的成熟的CSS预处理语言\n\n<!-- more -->\n\n## 使用\n\n若使用的编辑器是vscode，则只需安装`easy-sass`插件，即可在保存sass或scss文件的同时编译成对应的css文件\n\n## 注释\n\n```scss\n/* 这是暴露出去的注释 */\n// 这是隐藏的注释\n```\n\n## 变量\n\n- 全局变量 + 局部变量\n\n```less\n// 全局变量\n$color: red;\n$color: null;\n// !default 若变量还没赋值才生效\n$color: #fff !default;\nbody {\n  color: $color;\n  div {\n    // 局部变量\n    // !global 将局部转成全局\n    $color: pink !global;\n    $color: blue;\n    color: $color;\n  }\n}\ndiv {\n  color: $color;\n}\n```\n\n- 多值变量\n\n```scss\n$color: red blue black;\nbody {\n  color: nth($color, 1);\n  div {\n    color: nth($color, 2);\n  }\n}\n```\n\n- 属性名或类名  #{变量}\n\n```scss\n$name: \"box\";\n$attranme: \"border\";\np.#{$name} {\n  #{$attranme}: 1px solid red;\n}\n```\n\n## 运算\n\n- 数字运算： + - * / %\n  - `/` 生效条件：加括号、有变量、运算值\n  - `-`左右要有空格\n- 颜色运算\n  - rgb()自动转换成#格式再运算\n- 字符串运算\n  - 前面有双引号，结果就有双引号\n- 布尔运算：and or not\n- 数组运算：list function\n\n## 嵌套\n\n- 选择器嵌套\n- 属性嵌套\n\n```scss\n// 嵌套\nheader {\n  background: red;\n  // 属性嵌套\n  border: {\n    bottom: 1px solid green;\n    top: 1px solid black;\n  }\n  // 选择器嵌套\n  nav a {\n    color: gray;\n    &:hover {\n      color: red;\n    }\n  }\n}\n\n// ==> CSS\nheader {\n  background: red;\n  border-bottom: 1px solid green;\n  border-top: 1px solid black;\n}\n\nheader nav a {\n  color: gray;\n}\n\nheader nav a:hover {\n  color: red;\n}\n```\n\n## @规则\n\n- @import 导入\n\n- @media 媒体查询\n\n  ```scss\n  $viewportsize: (\n    'sm': '(max-width: 500px)',\n    'md': '(min-width: 501px) and (max-width: 1000px)',\n    'lg': '(min-width: 1001px)'\n  );\n  body {\n    @media screen {\n      @media(min-width: 0px) {\n        background: red;\n      }\n    }\n    @media #{map-get($viewportsize, 'md')} {\n      background: blue;\n    }\n    @media(min-width: 1000px) {\n      background: yellow;\n    }\n  }\n  ```\n\n- @extend 基础\n\n  ```scss\n  .error {\n    background: red;\n    border: 1px solid red;\n  }\n  .error .bg{\n    background: url(\"img/404.png\");\n  }\n  .info {\n    font-size: 12px;\n  }\n  .usererror {\n    @extend .error;\n    @extend .info;\n    border: 1px solid green;\n  }\n  ```\n\n- @at-root 返回根元素\n\n- @debug\n\n- @warn\n\n- @error\n\n## 控制指令\n\n- @if\n\n  ```scss\n  $isshow: 0;\n  p {\n    @if $isshow == 1 {\n      display: block;\n    }\n    @else {\n      display: none;\n    }\n  }\n  ```\n\n- @for\n\n  ```scss\n  // to 不包含最后一个\n  @for $i from 1 to 3 {\n    .item-#{$i} {\n      width: 2em * $i;\n    }\n  }\n  // through 包含最后一个\n  @for $i from 1 through 3 {\n    .item-#{$i} {\n      height: 2em * $i;\n    }\n  }\n  ```\n\n- @each\n\n  ```scss\n  @each $var in home, user, search {\n    .#{$var}-icon {\n      background: url('img/#{$var}.png');\n    }\n  }\n  ```\n\n- @while\n\n  ```scss\n  $i:4;\n  @while $i > 0 {\n    .hide-text-#{$i} {\n      overflow: hidden;\n    }\n    $i:$i - 1;\n  }\n  ```\n\n## 函数\n\n- 字符串函数\n\n  - unquote ：去除首位和末位的引号\n  - quote: 添加首位和末位的双引号（若已有单引号，转成双引号，若已有双引号，则不添加）\n  - to-upper-case：转成大写\n  - to-lower-case：转成小写\n\n- 数字函数\n\n  - percentage() 将一个不带单位的数转成百分比值\n  - round() 四舍五入\n  - ceil() 向上取整\n  - floor() 向下取整\n  - abs() 绝对值\n  - min($numbers ...) 最小值\n  - max($numbers ...) 最大值\n  - random() 随机数\n\n- 列表函数\n\n  - lenth($list) 长度\n  - nth($list, $n) 返回列表中指定的某个标签值\n  - join($list1, $list2, [$separator]) 将俩个列连接一起\n  - append($list1, $val, [$separator]) 将某个值放在列表的最后\n  - zip($lists...) 将几个列表合成一个多维的列表\n  - index($list, $value) 返回一个值在列表的位置\n\n- 颜色函数\n\n  - rgb($red, $green, $blue)\n  - rgba($red, $green, $blue, $alpha)\n  - red($color) 取出颜色中的红色部分\n  - green($color)\n  - blue($color)\n  - mix($color-1, $color-2, [$weight]) 混合俩种颜色\n\n- HSL函数 (颜色函数)\n\n  > hue色调，saturation饱和度，lightness亮度，H取值范围是0~360的圆心角，SL的取值范围是0~100%\n\n  - hsl($hue, $saturation, $lightness)\n  - hsla($hue, $saturation, $lightness, $alpha)\n  - hue($color)\n  - saturation($color)\n  - lightness($color)\n  - adjust-hue($color, $degress) 改变颜色的色相值\n  - lighten($color, $amount) 提高亮度\n  - darken($color, $amount) 降低亮度\n  - saturate($color, $amount) 提高饱和度\n  - desaturate($color, $amount) 降低饱和度\n\n- Opacity透明度函数\n\n  - alpha($color)  、 opacity($color)  获取颜色透明度值\n  - rgba($color, $alpha) 改变透明度\n  - opacify($colorr, $amount)  、 fade-in($color, $amount) 使颜色更不透明\n  - transparentize($color,$amount)、fade-out($color,$amount) 使颜色更透明\n\n- Introspection函数\n\n  - type-of($value) : 返回一个值的类型\n  - unit($number) 返回一个值的单位\n  - unitless($number) 判断一个值是否有单位\n  - comparable($number-1, $number-2) 判断俩个值是否可以做加减和合并\n\n- 三元条件函数\n\n  - if ($condition, $if-true, $if-false)\n\n- 自定义函数\n\n  - 函数定义\n  - 关键字参数\n  - 默认参数\n\n  ```scss\n  @function body-width ($content: 50, $border: 1) {\n    @return $content + $border;\n  }\n  body {\n    width: body-width($border: 100px);\n  }\n  ```\n\n## Less和Sass比较\n\n不同之处：\n\n- 使用前提：Less在JS上运行，Sass在Ruby上使用\n- 变量定义：Sass以$定义变量，Less以@定义变量\n- 处理机制：Less通过客户端处理，Sass通过服务端处理，相比较之下前者解析会比后者慢一点\n- Less使用较Sass简单，但Sass更加活跃成熟\n\n相同：\n\n- 混入（Mixins）——class中的class\n- 参数混入——可以传递参数的class，就像函数一样\n- 嵌套规则——Class中嵌套class，减少重复代码\n- 运算——CSS中用上数学\n- 颜色功能——可以编辑颜色\n- 命名空间——分组样式，从而可以被调用\n- 作用域——局部修改样式\n- JavaScript赋值——在CSS中使用JavaScript表达式赋值","tags":["course","CSS预处理器"],"categories":["笔记"]},{"title":"CSS预处理器-Less","url":"/2020/08/09/2020-08-09-less笔记/","content":"\n学习视频：[尚硅谷前端less教程](https://www.bilibili.com/video/BV1YW411T7vd)\n\n## less介绍\n\n> less是一种动态样式语言，属于css预处理器的范畴，他扩展了CSS语言，增加了变量、Mixin、函数等特性，是CSS更易维护和扩展，less既可以在客户端运行，也可以借助Node.js在服务端运行。\n\n<!-- more -->\n\n## 使用\n\n若使用的编辑器是vscode，则只需安装`easy-less`插件，即可在保存less文件的同时编译成对应的css文件\n\n## 注释\n\n```less\n/* 这是暴露出去的注释 */\n// 这是隐藏的注释\n```\n\n## 变量\n\n使用@申明一个变量： @A: B\n\n- 作为普通属性值来使用：直接使用@A\n\n- 作为选择器或属性名： @{A}的形式\n\n- 作为URL： @{url}\n\n  ```less\n  @color: blue;\n  @m: margin-top;\n  @selector: #wrap;\n  * {\n    @{m}: 0;\n  }\n  @{selector} {\n     background: @color;\n  }\n  ```\n\n- 变量的延迟加载\n\n  ```less\n  @var: 0;\n  .class {\n    @var: 1;\n    .brass {\n      @var: 2;\n      three: @var;\n      @var: 3;\n    }\n    one: @var;\n  }\n  \n  // ==> css\n  .class {\n    one: 1;\n  }\n  .class .brass {\n    three: 3;\n  }\n  ```\n\n## 嵌套规则\n\n- 基本嵌套规则\n- 平级的使用 &\n\n```less\n#wrap {\n  .inner {\n    &:hover {\n    }\n  }\n}\n\n// ==> CSS\n#wrap {\n}\n#wrap .inner {\n}\n#wrap .inner:hover {\n}\n```\n\n## less的混合\n\n> 混合是将一系列属性从一个规则集引入到另一个规则集的方式\n\n- 普通混合\n- 不带输出的混合\n- 带参数的混合\n- 带参数并且有默认值的混合\n- 带多个参数的混合\n- 命名参数\n- 匹配模式\n- arguments变量\n\n```less\n@selector: #wrap;\n// 带多个参数并且有默认值的混合\n.center(@w: 100px, @h: 100px, @c:yellow) {\n  width: @w;\n  height: @h;\n  background: @c;\n}\n@{selector} {\n  .inner {\n    .center(200px, 200px, pink);\n  }\n  .inner2 {\n     // 命名参数\n    .center(@c:black);\n  }\n}\n\n// ==> CSS\n#wrap .inner {\n  width: 200px;\n  height: 200px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background: pink;\n}\n#wrap .inner2 {\n  width: 100px;\n  height: 100px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background: black;\n}\n```\n\n```less\n// file: triangle.less\n.triangle(@_, @w, @c) {\n  width: 0;\n  height: 0;\n  border-style: solid;\n  overflow: hidden;\n\n}\n\n.triangle (L, @w, @c) {\n  border-width: @w;\n  border-color: transparent transparent transparent @c;\n}\n\n.triangle (R, @w, @c) {\n  border-width: @w;\n  border-color: transparent @c transparent transparent;\n}\n\n\n// file: 03.less\n@import \"./triangle.less\";\n#wrap .sjx {\n  .triangle(L, 40px, yellow);\n}\n\n\n// ==> css\n#wrap .sjx {\n  width: 0;\n  height: 0;\n  border-style: solid;\n  overflow: hidden;\n  border-width: 40px;\n  border-color: transparent transparent transparent yellow;\n}\n```\n\n## less运算\n\n在less中可以进行加减乘除的运算,要在其中一个值中添加单位，多个单位取第一个\n\n`width: (100px * 2);`\n\n## less继承\n\n- `.inner:extend(.center){}`\n- `.inner {&:extend(.center);}`\n- `.inner {&:extend(.center all);}`\n\n## less避免编译\n\n`~\" 属性值 \"`\n\n## 内置函数\n\n- 字符串函数\n  - escape（）通过对特殊字符使用URL编码来对字符串进行编码\n  - e() 返回不带引号的字符串\n  - %() 格式化一个字符串\n  - replace() 替换字符串的文本\n- 列表函数\n  - length() 将以逗号或空格分割的值列表作为参数\n  - extract() 将放回列表中指定位置的值\n- 数字函数\n- 颜色函数\n- 类型函数","tags":["course","CSS预处理器"],"categories":["笔记"]},{"title":"校淘二货","url":"/2020/08/07/2020-08-07-校淘二货/","content":"\n项目在线网址：[校淘二货](http://120.79.198.193:5000)\n\n项目github地址：[校淘二货](https://github.com/Jeffrey-0/XTEH-)\n\n<!-- more -->\n\n## 项目简介\n\n对我们学校而言，目前出现很多二手闲置群，而大部分人数爆满了，每天都有大量的物品信息发布，但是很快信息就被刷下去，二手交易的效率不高，因此，需要一个平台用于两方之间的交易。“校淘二货”就是面向在校大学生的一个二手网，可供大学生在上面发布自己的商品，仅提供联系，但不负责交付，同一个学校的学生能面对面的交易，提高了安全性，可以当面检查，确保物品的质量。\n\n## 环境依赖\n\n- node.js后台\n- mysql数据库\n\n## 使用说明\n\n1. 下载\n\n   ```shell\n   git clone git@github.com:Jeffrey-0/XTEH-.git\n   ```\n\n2. 创建数据库\n\n   新建数据库secondhandtradingplatform，导入secondhandtradingplatform.sql文件的数据和结构\n\n3. 配置数据库\n   修改mysql文件夹下的connect.js文件，修改用户名、密码\n\n   ```js\n   var connection = mysql.createConnection({\n     host     : 'localhost',\n     user     : 'root', // mysql用户名\n     password : 'root', // mysql密码\n     database : 'secondhandtradingplatform' ,//数据库名称\n     'dateStrings': true \n   });\n   ```\n\n4. 开启服务\n   在node中运行app.js文件\n\n5. 浏览器访问\n   在浏览器中输入`127.0.0.1:5000/`打开主页\n\n## 目录结构\n\n> mysql \t\t\t\t\t\t  //连接数据库的接口\n>\n> node_modules\t\t\t//第三方模块\n>\n> public\t\t\t\t\t\t\t//公开资源\n>\n> > css\t\t\t\t\t\t \t //css文件\n> >\n> > img\t\t\t\t\t\t\t//资源图片\n> >\n> > js\t\t\t\t\t\t\t\t //js文件\n>\n> routers\t\t\t\t\t\t\t//路由\n>\n> views\t\t\t\t\t\t\t\t//静态页面\n>\n> 效果截图\t\t\t\t\n>\n> app.js\t\t\t\t\t\t\t   //项目入口\n>\n> package.json\t\t\t\t\n>\n> package-lock.json\n>\n> README.md\t\t\t\t\t\t//介绍文件\n>\n> secondhandtradingplatform.sql\t//my数据库结构和数据，可直接导入","tags":["NodeJs","mySql"],"categories":["项目"]},{"title":"二叉搜索树与双向链表","url":"/2020/07/22/2020-06-10-二叉搜索树与双向链表/","content":"\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&tqId=11179&rp=1&ru=%2Factivity%2Foj&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&tPage=2)\n\n## 题目描述\n\n> 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\n\n<!-- more -->\n\n## 思路\n\n> 1.将左子树构造成双链表，并返回链表头节点。\n> 2.定位至左子树双链表最后一个节点。\n> 3.如果左子树链表不为空的话，将当前root追加到左子树链表。\n> 4.将右子树构造成双链表，并返回链表头节点。\n> 5.如果右子树链表不为空的话，将该链表追加到root节点之后。\n> 6.根据左子树链表是否为空确定返回的节点。\n\n## 编程\n\n```js\nfunction Convert(pRootOfTree)\n{\n    if (!pRootOfTree) {\n        return null\n    }\n    if (!pRootOfTree.left && !pRootOfTree.right) {\n        return pRootOfTree\n    }\n    var left = Convert(pRootOfTree.left)\n    var p = left\n    while (p && p.right) {\n        p = p.right\n    }\n    if (left) {\n        p.right = pRootOfTree\n        pRootOfTree.left = p\n    }\n    var right = Convert(pRootOfTree.right)\n    if (right) {\n        right.left = pRootOfTree\n        pRootOfTree.right = right\n    }\n    return left||pRootOfTree\n    \n}\n```\n\n","tags":["算法","树"],"categories":["笔记"]},{"title":"仿微信聊天室","url":"/2020/07/22/2020-7-22-weChat/","content":"\n\n在线测试：[仿微信聊天室](http://120.79.198.193:3000/)\n\n项目地址：[仿微信聊天室](https://github.com/Jeffrey-0/ChatRoom)\n\n> 本项目是学习b站的一个教学视频[使用websocket实现一个聊天室](https://www.bilibili.com/video/BV1yi4y1t7yD)，略有改动，添加了私聊功能\n\n\n## 实现功能\n\n- 在线群聊\n- 发送表情\n- 上传图片\n- 私聊\n\n## 快速开始\n\n1. 安装项目\n\n```shell\ngit clone git@github.com:Jeffrey-0/ChatRoom.git\n```\n\n2. 开启nodejs后台服务\n\n```shell\nnode app.js\n```\n\n3. 浏览器访问\n\n```\nhttp://localhost:3000/\n```\n\n","tags":["NodeJs","webSocket"],"categories":["项目"]},{"title":"二叉搜索树的后序遍历序列","url":"/2020/07/08/2020-06-07-二叉搜索树的后序遍历序列/","content":"\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&&tqId=11176&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking)\n\n## 题目描述\n\n> 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。\n\n<!-- more -->\n\n## 思路\n\n> 二叉搜索树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉搜索树。\n\n> 解题思路：后序遍历 的序列中，最后一个数字是树的根节点 ，数组中前面的数字可以分为两部分：第一部分是左子树节点 的值，都比根节点的值小；第二部分 是右子树 节点的值，都比 根 节点 的值大，后面用递归分别判断前后两部分 是否 符合以上原则\n\n## 编程\n\n```js\nfunction VerifySquenceOfBST(sequence, start=0, end=sequence.length - 1)\n{\n    if (sequence.length === 0) {\n        return false\n    }\n    if (start >= end) {\n        return true\n    }\n    for (var i = start; i < end; i++) {\n        if (sequence[i] > sequence[end]) {\n            break\n        }\n    }\n    for (var j = i + 1; j < end; j++) {\n        if (sequence[j] < sequence[end]) {\n            return false\n        }\n    }\n\n    return VerifySquenceOfBST(sequence, start, i - 1) && VerifySquenceOfBST(sequence, i, end - 1)\n}\n```\n\n","tags":["算法","树"],"categories":["笔记"]},{"title":"重建二叉树","url":"/2020/06/30/2020-05-27-重建二叉树/","content":"\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)\n\n## 题目描述\n\n> 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n<!-- more -->\n\n## 思路\n\n前序遍历： 根左右\n\n中序遍历： 左根右\n\n>前序遍历中第一个数为树的根节点，在中序遍历中找到根，根的左边属于根的左子树，根的右边属于根的右子树。\n>\n>将左子树、右子树看成新的树，在前序遍历中第一个数同样为此树的根节点，重新寻找其左子树和右子树，一直递归寻找\n\n## 编程\n\n```js\nfunction TreeNode(x) {\n    this.val = x;\n    this.left = null;\n    this.right = null;\n}\nfunction reConstructBinaryTree(pre, vin, node)\n{\n    var Node = node || new TreeNode(pre[0])\n    var index = vin.indexOf(pre[0])\n    var preLeft = pre.slice(1, index + 1)\n    var vinLeft = vin.slice(0, index)\n    var preRight = pre.slice(index + 1, pre.length)\n    var vinRight = vin.slice(index + 1, vin.length)\n    if (preLeft.length > 0) {\n      Node.left = new TreeNode(preLeft[0])\n      reConstructBinaryTree(preLeft, vinLeft, Node.left)\n    }\n    if (preRight.length > 0) {\n      Node.right = new TreeNode(preRight[0])\n      reConstructBinaryTree(preRight, vinRight, Node.right)\n    }\n    return Node        \n}\n// 测试\n/* var pre = [1,2,4,7,3,5,6,8]\nvar vin = [4,7,2,1,5,3,8,6]\nreConstructBinaryTree(pre, vin) */\n```\n\n\n","tags":["算法","树"],"categories":["笔记"]},{"title":"JS模块化","url":"/2020/06/18/2020-06-18-模块化/","content":"\n学习视频：[尚硅谷JS模块化教程](https://www.bilibili.com/video/BV18s411E7Tj)\n\n<!-- more -->\n\n## 模块化进化史\n\n- 全局function模式\n\n  ```js\n  var msg = 'module1'\n  function foo () {\n      console.log('foo()', msg)\n  }\n  // foo()\n  ```\n\n- namespace模式\n\n  ```js\n  let obj = {\n  \tmsg: 'moudule2'\n      foo () {\n          console.log('foo()', this.msg)\n      }\n  }\n  // obj.foo()\n  ```\n\n- IIFE模式——匿名函数自调用（闭包）\n\n  ```js\n  (function (window) {\n      let msg = 'module3'\n      function foo () {\n          console.log('foo()', msg)\n      }\n      window.module3 = {foo}\n  })(window)\n  // module3.foo()\n  ```\n\n- IIFE模式增强——引入依赖\n\n  ```js\n  (function (window, $) {\n      let msg = 'module4'\n      function foo () {\n          console.log('foo()', msg)\n      }\n      window.module4 = foo\n      $('body').css('background', ' red')\n  })(window, jQuery)\n  // module4()\n  ```\n\n- 造成问题：\n\n  - 请求过多\n  - 依赖模糊\n  - 难以维护\n\n\n\n## 模块化规范\n\n**CommonJS**\n\n- 基本语法\n  - 暴露模块  module.exports = value ;  exports.xxx = value\n  - 引入模块 require(xxx)\n- 实现\n  - 服务器端实现 Node.js\n  - 浏览器端实现 CommonJs的浏览器端打包工具Browserify\n\n**AMD**\n\n- 说明：Asynchronous Module Definition(异步模块定义)，专门用于浏览器，模块的加载是异步的\n\n- 基本语法\n\n  - 暴露模块 \n\n    ```js\n    // 定义没有依赖的模块\n    define(function () {\n        return 模块\n    })\n    \n    // 定义有依赖的模块\n    define(['module1', 'module2'], function (m1, m2) {\n        return 模块\n    })\n    ```\n\n  - 引入模块\n\n    ```js\n    requirejs.config({\n        baseUrl: '',\n        paths: {\n          模块名：模块路径\n        }\n      })\n    require(['module1', 'module2'], function(m1, m2) {\n        使用m1/m2\n    })\n    ```\n\n- 实现 [Require.js](https://requirejs.org/)\n\n**CMD**\n\n- 说明：专门用于浏览器端，模块是异步的，使用时才会加载执行\n\n- 基本语法\n\n  - 暴露模块\n\n    ```js\n    // 定义没有依赖的模块\n    define(function(require, export, module) {\n        exports.xxx = value\n        module.exports = value\n    })\n    // 定义有依赖的模块\n    define(function (require, export, module) {\n        var module2 = require('./module2')\n        require.async('./module3', function (m3) {\n            \n        })\n        exports.xxx = value\n    })\n    ```\n\n  - 引入模块\n\n    ```js\n    define(function (require) {\n        var m1 = require('./module1')\n        var m4 = require('./module4')\n        m1.show()\n        m4.show()\n    })\n    ```\n\n- 实现（浏览器端） [Sea.js](https://www.zhangxinxu.com/sp/seajs/)\n\n**ES6**\n\n- 说明：依赖模块需要编译打包出来\n- 语法\n  - 暴露模块 export\n  - 引入模块 import\n- 实现（浏览器端）\n  - 使用Babel将ES6编译成ES5代码\n  - 使用Browserify编译打包js\n\n## ES6（常用）\n\n1.定义package.json文件\n\n```json\n{\n  \"name\": \"es6_bable-browserify\",\n  \"version\": \"1.1.0\"\n}\n```\n\n2.安装\n\n```shell\nnpm install babel-cli browserify -g\nnpm install babel-reset-se2015 --save-dev\n// 引入第三方模块测试 jQuery\nnpm install jquery@1 --save\n```\n\n3.定义.babelrc文件\n\n```json\n{\n  \"presets\": [\"es2015\"]\n}\n```\n\n4.编码\n\njs/src/module1.js 分别暴露\n\n```js\n// 分别暴露\nexport function foo () {\n  console.log('foo() module1')\n}\nexport function bar () {\n  console.log('bar() module1')\n}\nexport let arr = [1, 2, 3, 4, 5]\n```\n\njs/src/module2.js 统一暴露\n\n```js\n// 统一暴露\nfunction fun () {\n  console.log('fun() module2')\n}\nfunction fun2 () {\n  console.log('fun2() module2')\n}\nexport { fun, fun2 }\n```\n\njs/src/module3.js 默认暴露\n\n```js\n// 默认暴露\n// export default () => {\n//   console.log('我是默认暴露的')\n// }\nexport default {\n  msg: '默认暴露',\n  foo () {\n    console.log(this.msg)\n  }\n}\n```\n\njs/src/main.js\n\n```js\n// import xxx from '路径'\nimport { foo, arr } from './module1'\nimport { fun } from './module2'\nimport module3 from './module3'\nimport $ from 'jquery'\nfoo()\nconsole.log(arr)\nfun()\nmodule3.foo()\n$('body').css('background', 'green')\n```\n\n5.编译\n\n- 使用Babel 将ES6编译为ES5代码\n\n  ```shell\n  babel js/src -d js/lib\n  ```\n\n- 使用Browserify编译js，使包含CommonJS语法的js文件能在浏览器运行\n\n  ```shell\n  browserify js/lib/main.js -o js/lib/bundle.js\n  ```\n\n6.html页面引入\n\n```html\n<script src=\"./js/dist/bundle.js\" type=\"text/javascript\"></script>\n```\n\n7.打开html","tags":["course","JavaScript"],"categories":["笔记"]},{"title":"青蛙跳台","url":"/2020/06/14/2020-05-26-青蛙跳台/","content":"\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)\n\n## 题目1描述\n\n> 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）\n\n<!-- more -->\n\n## 编程\n\n```js\nfunction jumpFloor(number)\n{\n    if (number === 2) {\n        return 2\n    } else if (number === 1) {\n        return 1\n    } else {\n        return jumpFloor(number - 1) + jumpFloor(number - 2)\n    }\n}\n```\n\n\n\n## 题目2描述\n\n> 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n\n## 编程\n\n```js\nfunction jumpFloorII(number)\n{\n    if (number === 0) {\n        return 0\n    } else if (number === 1) {\n        return 1\n    }\n    var result = 1\n    for (var i = 1; i < number; i++) {\n        result += jumpFloorII(number - i)\n    }\n    return result\n}\n```\n\n","tags":["算法","递归"],"categories":["笔记"]},{"title":"从尾到头打印链表","url":"/2020/06/02/2020-05-21-从尾到头打印链表/","content":"\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n## 题目描述\n\n> 输入一个链表，按链表从尾到头的顺序返回一个ArrayList。\n\n<!-- more -->\n\n## 用例\n\n> 输入: {4, 5, 7, 8}\n>\n> 输出: [8, 7, 5, 4]\n\n## 编程\n\n```js\n/*function ListNode(x){\n    this.val = x;\n    this.next = null;\n}*/\nfunction printListFromTailToHead(head)\n{\n    var x = []\n    while (head) {\n        x.unshift(head.val)\n        // 插入数组中的第一位\n        head = head.next\n    }\n    return x\n}`\n```\n\n","tags":["算法","链表"],"categories":["笔记"]},{"title":"webpack入门到精通","url":"/2020/05/31/2020-05-31-webpack/","content":"\n教学视频地址： [尚硅谷2020最新版Webpack5实战教程](https://www.bilibili.com/video/BV1e7411j7T5)\n\n项目github地址: [webpack入门到精通](https://github.com/Jeffrey-0/webpack-course)\n\n<!-- more -->\n\n**环境参数**（本机）\n\nNodejs v13.8.0\n\nwebpack 4.43.0\n\n## webpack简介\n\n**weback是什么**\n\n- 前端资源构建工具\n- 静态模块打包器（module bundler）\n\n**webpack五个核心概念**\n\n| 名称    | 描述 |\n| ------- | ---- |\n| Entry   | 入口 |\n| Output  | 出口 |\n| Loader  | 转换 |\n| Plugins | 插件 |\n| Mode    | 模式 |\n\n## webpack初体验\n\n**安装**\n\n```shell\nnpm i webpack webpack-cli -D\n```\n\n**使用**\n\n```shell\n#开发模式\nwebpack ./src/index.js -o ./build/built.js --mode=development\n#生成模式\nwebpack ./src/index.js -o ./build/built.js --mode=production\n```\n\n> 未配置前，只能处理js/json文件，不能处理css/img等其他资源\n\n**配置模板**\n\n```js\n// file:webpack.config.js   webpack的配置文件\nconst {resolve} = require('path')\nmodule.exports = {\n  // 入口起点\n  entry: './src/index.js',\n  // 出口\n  output: {\n    filename: 'built.js',\n    path: resolve(__dirname, 'build') \n  },\n  // loader的配置\n  module: {\n    rules: [\n    // 详细loader配置\n    ]\n  },\n  // plugins的配置\n  plugins: [\n  ],\n  // 模式\n  mode: 'development' //开发模式\n  // mode: 'production' //生产模式\n}\n```\n\n## 打包样式资源\n\n安装\n\n```shell\nnpm i style-loader css-loader -D\nnpm i less-loader -D\n```\n\n配置\n\n```js\n// file:webpack.config.js\nmodule: {\n  rules: [\n  // 详细loader配置\n  {\n    test: /\\.css$/, //匹配css文件\n    use: [\n      'style-loader', // 将js中的样式资源，添加到head中\n      'css-loader' // 将css变成模块加载到js中\n    ]\n  }\n  ]\n},\n{\n  test: /\\.less$/, //匹配less文件\n  use: [\n    'style-loader', // 将js中的样式资源，添加到head中\n    'css-loader', // 将css变成模块加载到js中\n    'less-loader' // 将less转成css文件\n  ]\n}    \n```\n\n运行\n\n```shell\nwebpack\n```\n\n## 打包html资源\n\n安装\n\n```\nnpm i html-webpack-plugin -D\n```\n\n引入\n\n```js\n// file:webpack.config.js\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n```\n\n使用\n\n```js\n// file:webpack.config.js\nplugins: [\n  new HtmlWebpackPlugin({\n    template: './src/index.html'\n  })\n]\n```\n\n## 打包图片资源\n\n安装\n\n```shell\nnpm i url-loader file-loader html-loader -D\n```\n\n配置\n\n```js\n// file:webpack.config.js\nmodule: {\n    rules: [\n    {\n      // 处理图片资源\n      test: /\\.(jpg|png|gif)$/,\n      // 只有一个lodaer，可以不用use\n      loader: 'url-loader',\n      options: {\n        // 图片小于8kb,就会被base64处理\n        limit: 8 * 1024,\n        // 视频说俩种图片处理有冲突报错，不过我这边没冲突\n        // esModule: false,\n        // 重命名\n        name: '[hash:8].[ext]'\n      }\n    }\n  ]\n}\n// 处理html文件中的图片\n{\n    test: /\\.html$/,\n    loader: 'html-loader'\n}\n```\n\n## 打包其他资源\n\n> file-loader 前面已经安装\n\n配置\n\n```js\n// file:webpack.config.js\nmodule: {\n    rules: [\n    // 打包其他资源\n    {\n      // 排除css、js、html图片资源\n      exclude: /\\.(css|js|html|jpg|png|gif)$/,\n      loader: 'file-loader',\n      options: {\n        name: '[hash:8].[ext]'\n      }\n    }\n   ]\n}\n```\n\n## devServer\n\n作用\n\n> 开发服务器，自动编译，自动刷新，自动打开浏览器\n>\n> 只会在内存中编译打包，不会有任何输出\n\n安装\n\n```shell\nnpm i webpack-dev-server -D\n```\n\n配置\n\n```js\ndevServer: {\n    contentBase: resolve(__dirname, 'build'),\n    compress: true,\n    port: 3000,\n    open: true\n}\n```\n\n使用\n\n```\nnpx webpack-dev-server\n```\n\n## 提取css成单独文件\n\n安装\n\n```shell\nnpm i mini-css-extract-plugin -D\n```\n\n引入\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n```\n\n配置\n\n```js\n// 1.修改plugins\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: 'css/build.css'\n    })\n]\n// 2.修改loader，即module中的rules\n{\ntest: /\\.css$/,\nuse: [MiniCssExtractPlugin.loader, 'css-loader']\n}\n```\n\n## css的兼容性处理\n\n安装\n\n```shell\nnpm i postcss-loader postcss-preset-env\n```\n\n配置\n\n```js\n// 修改loader，即module中的rules\n{\n  test: /\\.css$/,\n  // use: [MiniCssExtractPlugin.loader, 'css-loader']\n  use: [\n  MiniCssExtractPlugin.loader,\n  'css-loader',\n  {\n    loader: 'postcss-loader',\n    options: {\n      ident: 'postcss',\n      plugins: () => [\n        require('postcss-preset-env')()\n      ]\n    }\n  }]\n}\n```\n\n## 压缩css\n\n安装\n\n```shell\nnpm i optimize-css-assets-webpack-plugin -D\n```\n\n引入\n\n```js\nconst OptimizeCssAssetsWebpackPlugin= require('optimize-css-assets-webpack-plugin')\n```\n\n配置\n\n```js\n// 修改plugins\nplugins: [\n    new OptimizeCssAssetsWebpackPlugin()\n  ]\n```\n\n## js语法检查\n\n> 注：老师采用的是aribnb,不过我采用的代码风格是js- standard-style\n\n安装\n\n```shell\nnpm i eslint-loader eslint -D\n```\n\n```shell\nnpm install eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node -D\n```\n\n配置\n\n```js\n// file: package.json\n\"eslintConfig\": {\n  \"extends\": \"standard\"\n}\n```\n\n```js\n// 增加loader，即module中的rules\n{\n    test: /.js$/,\n    exclude: /node_modules/,\n    loader: 'eslint-loader',\n    options: {\n    // 自动修复\n    \tfix: true\n    }\n}\n```\n\n## js兼容性处理\n\n兼容处理有三种\n\n- @babel/preset-env 基本js兼容处理\n  问题：只能转换基本语法，如promise不能转换\n\n- @babel/polyfill 全部兼容处理\n\n  问题：将所有兼容处理，体积太大\n\n- core-js 按需加载\n\n安装\n\n```shell\nnpm i babel-loader @babel/core @babel/preset-env -D\n```\n\n```shell\nnpm i @babel/polyfill -D\n```\n\n```shell\nnpm i core-js -D\n```\n\n配置\n\n```js\n// 第一种 增加loader，即module中的rules\n{\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    loader: 'babel-loader',\n    options: {\n   \t\tpresets: ['@babel/preset-env']\n    }\n}\n```\n\n```js\n// 第二 直接在js文件中增加\nimport '@babel/polyfill'\n```\n\n```js\n// 第三种 增加loader，即module中的rules\n{\n  test: /\\.js$/,\n  exclude: /node_modules/,\n  loader: 'babel-loader',\n  options: {\n    // presets: ['@babel/preset-env']\n    presets: [\n      ['@babel/preset-env',\n      {\n        // // 按需加载\n        useBuiltIns: 'usage',\n        // 指定core-js版本\n        corejs: {version: 3},\n        // 指定兼容性到哪个版本浏览器\n        targets: {\n          chrome: '60',\n          firefox: '60',\n          ie: '9',\n          safari: '10',\n          edge: '17'\n        }\n      }]\n    ]\n  }\n}\n```\n\n## js压缩\n\n```js\n// file: webpack.config.js 切换成生产模式\nmode: 'production'\n```\n\n## html压缩\n\n```js\n// file： webpack.config.js 添加之前插件的minify属性\nplugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html',\n      minify: {\n        // 移除空格\n        collapseWhitespace: true,\n        // 移除注释\n        removeComments: true,\n        // 移除属性的双引号，不生效\n        removeAttributeQuotes: true\n      }\n    })\n]\n```\n\n## HMR\n\n> HMR:  hot module replacement 热模块替换,一个文件修改后，只重新构建该文件，而不是全部构建\n\n开启热功能\n\n```js\n// file: webpack.config.js\ndevServer: {\n    contentBase: resolve(__dirname, 'build'),\n    compress: true,\n    port: 3000,\n    open: true,\n    // 开启HMR功能\n    hot: true\n}\n```\n\n- 样式文件：默认有HMR功能\n\n- js文件：默认无HMR功能\n\n  ```js\n  // file:./src/jsindex.js   入口js文件下方添加\n  if (module.hot) {\n    module.hot.accept('./print.js', function () {\n    })\n  }\n  ```\n\n- html文件：默认无HMR功能，而且会导致无法热更新\n\n  ```js\n  // file: webpack.config.js\n  entry: ['./src/js/index.js', './src/index.html']\n  ```\n\n## source-map\n\n> 找到源代码的错误信息和错误位置\n\n**使用**\n\n```js\n// file: webpack.config.js\ndevtool: 'source-map'\n```\n\n**参数**\n\n`[inline-|hidden-eval-][nosourses-][cheap-[module-]]source-map`\n\n| 属性                    | 存放位置 | 错误原因      | 错误位置    |\n| ----------------------- | -------- | ------------- | ----------- |\n| source-map              | 外部     | 源文件        | 源文件      |\n| inline-source-map       | 内联     | 源文件        | 源文件      |\n| eval-source-map         | 内联     | 源文件(+hash) | 源文件      |\n| hidden-source-map       | 外部     | 构建文件      | 构建文件    |\n| nosources-source-map    | 外部     | 源文件        | 无          |\n| cheap-source-map        | 外部     | 源文件        | 源文件(1行) |\n| cheap-module-source-map | 外部     | 源文件        | 源文件(1行) |\n\n开发环境推荐：eval-source-map\n\n生产环境推荐：source-map / cheap-source-map / hidden-source-map\n\n## oneOf\n\n> 只匹配一个loader，不用全部都匹配，优化打包构建速度\n\n```js\nrules: [\n  {\n    // 在package.json中eslintConfig->standard\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    // 优先执行\n    enforce: 'pre',\n    loader: 'eslint-loader',\n    options: {\n      fix: true\n    }\n  },\n  {\n    // 只匹配其中一个loader\n    oneOf: [\n      {\n        test: /\\.css$/,\n        use: [...commonCssLoader]\n      },\n      {\n        // 在package.json中设置浏览器列表browserslist\n        test: /\\.less$/,\n        use: [...commonCssLoader, 'less-loader']\n      }\n    ]\n  }\n]\n```\n\n## 缓存\n\n- babel缓存（第二次打包构建速度更快）\n\n  ```js\n  // 修改js-loader中的options\n  {\n  \ttest: /\\.js$/,\n  \texclude: /node_modules/,\n  \tloader: 'babel-loader',\n  \toptions: {\n  \t// 开启babel缓存，第二次构建时读取缓存\n  \t\tcacheDirectory: true\n  \t}\n  }\n  ```\n\n```\n  \n* 文件资源缓存（让上线运行缓存更好使用）\n\n  * hash 每次webpack会生成唯一的hash值，如果只改动一个文件，打包后会导致所有缓存失效\n  * chunkhash 如果打包来自同一个chunk，则hash值相同\n  * contenthash 根据内容生成hash值。\n\n  ```js\n  // 在生成的文件名中加上不同hash值\n  output: {\n      filename: 'js/built.[contenthash:10].js',\n      path: resolve(__dirname, 'build')\n    }\n  \n  new MiniCssExtractPlugin({\n        filename: 'css/built.[contenthash:10].css'\n      })\n```\n\n## tree-shaking\n\n> 去除无用代码，前提：使用es6模块化，开启production环境\n\n默认已经开启了，不过可能会去除css等其他文件\n\n```json\n\"sideEffects\": [\"*.css\", \"*.less\"]\n```\n\n## 代码分割\n\n- 多入口\n\n  ```js\n  entry: {\n      // 多入口\n      index: './src/js/index.js',\n      test: './src/js/test.js'\n    }\n  ```\n\n- optimization\n\n  ```js\n  // file: webpack.config.js\n  // 1.将node_modules中的代码单独打包一个chunk输出\n  // 2.自动提取多入口chunk 的公共文件\n    optimization: {\n      splitChunks: {\n        chunks: 'all'\n      }\n    }\n  ```\n\n- import动态导入，能将某文件单独打包\n\n  ```js\n  // file: ./src/index.js\n  import(/* webpackChunkName: 'test' */'./test')\n    .then(({ mul, sub }) => {\n      console.log(mul(2, 3))\n    })\n    .catch(() => {\n      console.log('加载失败')\n    })\n  ```\n\n## lazy loading\n\n> 懒加载：文件需要使用时才加载\n>\n> 预加载： 会在使用之前空闲时提前加载js\n\n```js\n// file: ./src/js/index.js\ndocument.getElementById('btn').onclick = function () {\n  import(/* webpackChunkName: 'test', webpackPrefetch: true */'./test').then(({ mul }) => {\n    console.log(mul(1, 3))\n  })\n}\n```\n\n## PWA\n\n> 渐进式网络开发应用程序（离线可访问）\n\n安装\n\n```shell\nnpm i workbox-webpack-plugin -D\n```\n\n引入\n\n```js\nconst WorkboxWebpackPlugin = require('workbox-webpack-plugin')\n```\n\n配置\n\n```js\n// file: webpack.config.js\n  plugins: [\n    new WorkboxWebpackPlugin.GenerateSW({\n      clientsClaim: true,\n      skipWaiting: true\n    }),\n  ],\n```\n\n使用\n\n```js\n// file: ./src/js/index.js\n// 注册serviceworker\n// 处理兼容性问题\nif ('serviceworker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceworker\n      .register('/service-worker.js')\n      .then(() => {\n        console.log('sw注册成功')\n      })\n      .catch(() => {\n        console.log('注册失败')\n      })\n  })\n}\n```\n\n服务器搭建（serviceWorker只能在服务器中使用）\n\n```shell\n# 安装全局serve\nnpm i serve -g\n# 启动服务器，将build目录下所有资源作为静态资源暴露出去\nserve -s build\n```\n\n## 多进程打包\n\n> 只有工作消耗时间比较长，才需要多进程打包\n\n安装\n\n```shell\nnpm i thread-loader -D\n```\n\n配置\n\n```js\n// file: webpack.config.js  ->添加loader\n{\n    loader: 'thread-loader',\n        options: {\n            workers: 2\n        }\n}\n```\n\n## externals\n\n> 忽略文件的打包\n\n配置\n\n```js\n// file: webpack.config.js\nexternals: {\n    // 忽略库名 -- npm包名\n    jquery: 'jQuery'\n}\n```\n\n重新引入\n\n```html\n<!-- file: index.html -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js\"></script>\n```\n\n## DLL\n\n> 动态连接库,将库打包单独打包\n\n安装\n\n```shell\nnpm i add-asset-html-webpack-plugin -D\n```\n\n新建dll配置文件\n\n```js\n// file: webpack.dll.js\nconst { resolve } = require('path')\nconst webpack = require('webpack')\nmodule.exports = {\n  entry: {\n    jquery: ['jquery']\n  },\n  output: {\n    filename: '[name].js',\n    path: resolve(__dirname, 'dll'),\n    library: '[name]_[hash:8]'\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      name: '[name]_[hash:8]',\n      path: resolve(__dirname, 'dll/manifest.json')\n    })\n  ],\n  mode: 'production'\n}\n```\n\n引入\n\n```js\n// file: webpack.config.js\nconst webpack = require('webpack')\nconst AddAssetHtmlWebpackPlugin = require('add-asset-html-webpack-plugin')\n```\n\n配置\n\n```js\n// file: webpack.config.js\nplugins: [\n    new webpack.DllReferencePlugin({\n      manifest: resolve(__dirname, 'dll/manifest.json')\n    }),\n    new AddAssetHtmlWebpackPlugin({\n      filepath: resolve(__dirname, 'dll/jquery.js')\n    })\n  ]\n```\n\n运行\n\n```shell\n# 先生成单独打包的文件\nwebpack --config webpack.dll.js\n# 再进行打包构建\nwebpack\n```\n\n## 优化性能总结\n\n**开发环境性能优化**\n\n- 优化打包构建速度\n  - HMR\n- 优化代码调试\n  - source-map\n\n**生产环境性能优化**\n\n- 优化打包构建速度\n  - oneOf\n  - babel缓存\n  - 多进程打包\n  - externals 忽略打包\n  - dll 单独打包\n- 优化代码运行的性能\n  - 缓存（hash-chunkhash-contenthash)\n  - tree shaking 树摇，去除无用\n  - code split 代码分割\n  - 懒加载/预加载\n  - pwa 离线访问\n\n## entry\n\n> 入口起点\n\n- string `'./src/index.js'`\n\n  - 打包形成一个chunk ，输出一个bundle文件\n  - 此时chunk的名称模式是main\n\n- array `['./src/index.js', './src/add.js']`\n\n  - 多入口\n  - 所有入口文件最终形成一个chunk ，输出一个bundle文件\n  - 作用只有在HMR功能中让html热更新生效\n\n- object`{index: './src/index.js',add: './src/add.js'}`\n\n  - 多入口\n  - 有几个入口就有几个chunk，输出几个bundle文件\n  - chunk的名称是key\n\n- 特殊用法(复用性)\n\n  ```js\n  {\n      index: ['./src/index.js', './src/add.js'],\n      count: './src/count.js'\n  }\n  ```\n\n## output\n\n```js\n  output: {\n    // 文件名\n    filename: '[name].js',\n    // 文件构建的路径\n    path: resolve(__dirname, 'build'),\n    // 所有输出资源的公共路径前缀\n    publicPath: './',\n    // 非入口chunk 的名称\n    chunkFilename: 'js/[name]_chunk.js',\n    // 整个库向外暴露的变量名\n    library: '[name]',\n    // 变量名添加到哪个上 window，global，commonjs\n    libraryTarget: 'window'\n  }\n```\n\n## module\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /.\\css$/,\n      // 多个loader用use\n      use: ['style-loader', 'css-loader']\n    },\n    {\n      test: /\\.js$/,\n      // 排除node_modules下的js文件\n      exclude: /node_modules/,\n      // 只检查src下的js文件\n      include: resolve(__dirname, 'src'),\n      // 优先执行\n      enforce: 'pre',\n      // 延后执行\n      enforce: 'post',\n      // 单个loader用loader\n      loader: 'eslint-loader',\n      options: {}\n    },\n    {\n      // 以下配置只会生效一个\n      oneOf: []\n    }\n  ]\n}\n```\n\n## resolve\n\n```js\nresolve: {\n  // 配置解析模块路径别名:优点简写路径，缺点路径没有提示\n  alias: {\n    $css: resolve(__dirname, 'src/css')\n  },\n  // 配置省略文件的后缀名\n  extensions: ['.js', 'json', '.jsx', '.css'],\n  // 告诉webpack解析模块是去那里找\n  modules: [resolve(__dirname, '../../node_modules'), 'node_modules']\n}\n```\n\n## optimization\n\n```js\noptimization: {\n  splitChunks: {\n    chunks: 'all'\n  },\n  // 将当前模块的记录其他模块的hash单独打包为一个文件runtime\n  // 解决：修改a文件导致b文件的contenthash变化\n  runtimeChunk: {\n    name: entrypoint => `runtime-${entrypoint.name}`\n  },\n  minimizer: [\n    // 配置删除环境的压缩方案\n    new TerserWebpackPlugin({\n      // 开启缓存\n      cache: true,\n      // 开启多进程打包\n      parallel: true,\n      // 启动source-map\n      sourceMap: true\n    })\n  ]\n}\n```","tags":["course","webpack"],"categories":["笔记"]},{"title":"登录注册模板","url":"/2020/05/26/2020-05-26-login-template/","content":"\n演示demo地址：[通用登录注册演示](https://jeffrey-0.github.io/login-template/login.html)(由于数据采用json-server开启的本地服务，演示获取不了数据，建议克隆到本地进行测试)\n\ngithub项目地址：[通用登录注册](https://github.com/Jeffrey-0/login-template)\n\n## 实现功能\n\n- [x] 兼容PC、手机端\n- [x] 异步验证用户存在\n- [x] 字段输入规则\n- [x] 记住密码\n- [x] 登录注册返回提示\n- [ ] 手机短信验证\n- [ ] 第三方登录\n\n## 安装使用\n\n**安装**：\n\n```shell\n$ git clone https://github.com/Jeffrey-0/login-template\n```\n\n**测试**：\n\n1. 在命令行cd到本项目地址，如果没有下载json-server，要先下载\n\n   ```shell\n   npm install -g json-server\n   ```\n\n2. 开启数据接口\n\n   ```shell\n   json-server user.json\n   ```\n\n3. 打开login.html文件\n\n## 自定义配置\n\n- 背景图`img/bg.jpg`替换\n- 项目logo图`img/logo.png`替换\n- ...","tags":["HTML","JavaScript"],"categories":["项目"]},{"title":"3D炫酷旋转相册","url":"/2020/05/23/2020-05-23-3D-photo/","content":"\n\n\n演示demo地址：[3D炫酷旋转相册演示](https://jeffrey-0.github.io/3D-photo/index.html)\n\n项目地址：[3D炫酷旋转轮播图](https://github.com/Jeffrey-0/3D-photo)\n\n<!-- more -->\n\n## 功能\n\n- 3D旋转效果\n- 自动轮播\n- 鼠标拖动切换视角\n- 点击当前图片跳转链接\n- 自适应各种图片（最大等比例+居中裁切）\n\n## 快速开始\n\nCSS样式\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://jeffrey-0.github.io/3D-photo/index.css\">\n```\n\nHTML结构\n\n```html\n<div id=\"container\">\n    <div class=\"wrap\">\n      <a href=\"img/1.jpg\" ><img src=\"img/1.jpg\" alt=\"\"></a>\n      <a href=\"img/2.jpg\" ><img src=\"img/2.jpg\" alt=\"\"></a>\n    </div>\n  </div>\n```\n\nJS脚本\n\n```html\n<script type=\"text/javascript\" src=\"https://jeffrey-0.github.io/3D-photo/index.js\"></script>\n<script type=\"text/javascript\">\n  var container = document.getElementById('container')\n  photo3D(container, {\n    isAutoPlay: true, // 是否自动轮播\n    interTime: 1000, // 轮播时间,单位:ms\n    rotateX: -20, // 初始沿x轴翻转角度,单位:deg\n    rotateY: 0 // 初始沿y轴翻转角度,单位:deg\n  })\n</script>\n```\n\n## 选项\n\n这些选项均有默认值，可根据自己喜好配置不同值\n\n| 选项       | 类型    | 默认 | 描述                       |\n| ---------- | ------- | ---- | -------------------------- |\n| isAutoPlay | Boolean | true | 是否自动轮播               |\n| interTime  | Number  | 1000 | 轮播的时间，单位：毫秒     |\n| rotateX    | Number  | -20  | 初始沿x轴翻转角度,单位:deg |\n| rotateY    | Number  | 0    | 初始沿y轴翻转角度,单位:deg |\n\n> 如果你不想要点击当前图片跳转链接，可以设置a标签中的`href`为`javascript:;`\n\n## 兼容性\n\n- 兼容Chrome、Opera","tags":["CSS","JavaScript"],"categories":["项目"]},{"title":"替换空格","url":"/2020/05/22/2020-05-20-替换空格/","content":"\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n## 题目描述\n\n> 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n<!-- more -->\n\n## 编程\n\n```js\nfunction replaceSpace(str)\n{\n    return str.replace(/ /g, '%20')\n}\n```\n\n补充：如果要在正则表达式中传入动态参数，`eval('/' + 参数 + '/g')`\n\n","tags":["算法","字符串"],"categories":["笔记"]},{"title":"原生js实现三级联动","url":"/2020/05/20/2020-05-20-three-level-linkage/","content":"\n\n\n项目演示地址：[原生js实现三级联动演示](https://jeffrey-0.github.io/three-level-linkage/index.html)\n\n项目github地址：[原生js实现三级联动项目](https://github.com/Jeffrey-0/three-level-linkage)\n\n<!-- more -->\n\n## HTML结构(index.html)\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title></title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"css/index.css\">\n</head>\n<body>\n  <ul class=\"container\">\n    <h1>原生js实现三级联动</h1>\n    <li class=\"row\">\n      <p>省 会</p>\n      <div><select name=\"province\" id=\"province\">\n      </select></div>\n    </li>\n    <li class=\"row\">\n      <p>城 市</p>\n      <div><select name=\"city\" id=\"city\"></select></div>\n    </li>\n    <li class=\"row\">\n      <p>院 校</p>\n      <div><select name=\"school\" id=\"school\"></select></div>\n    </li>\n  </ul>\n  <script type=\"text/javascript\" src=\"js/school.js\"></script>\n  <script type=\"text/javascript\" src=\"js/index.js\"></script>\n</body>   \n</html>\n```\n\n## CSS样式(css/index.css)\n\n```css\n*{\n  padding: 0;\n  margin: 0;\n}\nbody{\n  background: aliceblue;\n}\nul{\n  list-style: none;\n}\nh1{\n  text-align: center;\n  margin-bottom: 50px;\n}\n.container{\n  width: 300px;\n  margin: 50px auto;\n}\n.container li.row{\n  width: 100%;\n  height: 42px;\n  background: white;\n  border-radius: 15px;\n  margin-top: 10px;\n}\n.container li.row p{\n  display: inline-block;\n  color: #16b7f7;\n  line-height: 42px;\n  padding: 0 10px;\n}\n.container li.row p::after{\n  content: \"|\";\n  color: #cccccc;\n  padding: 0 0 0 15px;\n}\n.container li.row div{\n  display: inline-block;\n  width: 70%;\n  height: 100%;\n}\n.container li.row div select{\n  width: 100%;\n  height: 30px;\n  border-radius: 5px;\n  border-color: aliceblue;\n}\n```\n\n## JS脚本\n\n**数据存储(js/school.js)**\n\n```js\nvar province = [['00', '北京'], ['01', '重庆'], ['02', '广东']]\nvar city = {\n  '00': [['000', '朝阳区'], ['001', '顺义区']],\n  '01': [['002', '城口县'], ['003', '丰都县']],\n  '02': [['004', '汕头市'], ['005', '江门市']]\n}\nvar allschool = {\n  '000': [[1, '北京大学'], [2, '清华大学']],\n  '001': [[3, '顺义大学'], [4, '无名大学']],\n  '002': [[5, '重庆大学']],\n  '003': [[6, '丰都大学']],\n  '004': [[7, '汕头大学']],\n  '005': [[8, '五邑大学'], [9, '江职']]\n}\n```\n\n**(js/index.js)**\n\n```js\n(function () {\n  var provinceNode = document.getElementById('province')\n  var cityNode = document.getElementById('city')\n  var schoolNode = document.getElementById('school')\n\n  function provinceInit () {\n    // 省会的获取\n    var provinceStr = ''\n    for (var i = 0; i < province.length; i++) {\n      provinceStr += '<option value=' + province[i][0] + '>' + province[i][1] + '</option>'\n    }\n    provinceNode.innerHTML = provinceStr\n  }\n\n  function cityInit () {\n    // 城市的获取\n    var cityStr = ''\n    for (var i = 0; i < city[provinceNode.value].length; i++) {\n      cityStr += '<option value=' + city[provinceNode.value][i][0] + '>' + city[provinceNode.value][i][1] + '</option>'\n    }\n    cityNode.innerHTML = cityStr\n  }\n\n  function schoolInit () {\n    // 学校的获取\n    var schoolStr = ''\n    for (var i = 0; i < allschool[cityNode.value].length; i++) {\n      schoolStr += '<option value=' + allschool[cityNode.value][i][0] + '>' + allschool[cityNode.value][i][1] + '</option>'\n    }\n    schoolNode.innerHTML = schoolStr\n  }\n\n  // 联动事件\n  provinceNode.onchange = function () {\n    cityInit()\n    schoolInit()\n  }\n\n  cityNode.onchange = function () {\n    schoolInit()\n  }\n\n  provinceInit()\n  cityInit()\n  schoolInit()\n})()\n```\n\n","tags":["JavaScript"],"categories":["项目"]},{"title":"二维数组中的查找","url":"/2020/05/19/2020-05-19-二维数组查找/","content":"\n\n\n在线测评地址：[牛客网](https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)\n\n## 题目描述\n\n> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n## 限制\n\n> 时间限制：C/C++ 1秒，其他语言2秒 空间限制：C/C++ 32M，其他语言64M 热度指数：1802254\n>\n> 本题知识点： [查找](https://www.nowcoder.com/questionCenter?questionTypes=000100&mutiTagIds=589) [数组](https://www.nowcoder.com/questionCenter?questionTypes=000100&mutiTagIds=578)\n\n## 思路\n\n> 采用右上角或左下角开始遍历。我以右上角为例，如果比目标数大，去除所在列，如果比目标数小，去除所在行，直到行或列超出范围，仍然没有找到目标数，则为false，反之为true。\n\n## 编程\n\n```js\nfunction Find(target, array)\n{\n    var x_max = array.length\n    var x = 0\n    var y = array[0].length - 1\n    while (x < x_max && y >= 0) {\n        if (array[x][y] === target) {\n            return true\n        } else if (array[x][y] < target) {\n            x++\n        } else {\n            y--\n        }\n    }\n    return false\n}\n```\n\n","tags":["算法","查找","数组"],"categories":["笔记"]},{"title":"Vue实战小demo-备忘录","url":"/2020/05/18/2020-05-18-memorandum/","content":"\n\n\n演示demo地址：[备忘录演示地址](https://jeffrey-0.github.io/memorandum/)\n\n项目github地址：[备忘录项目地址](https://github.com/Jeffrey-0/memorandum)\n\n<!-- more -->\n\n## 功能\n\n- 添加、删除、修改事件\n- 任务完成\n- 本地localStorage存储数据\n- 定时铃声提醒\n\n注：不兼容ie","tags":["Vue"],"categories":["项目"]},{"title":"MiliMili动漫网","url":"/2020/05/12/2020-05-12-MiliMili/","content":"\n\n\n项目在线网址：[MiliMili](http://120.79.198.193:8080/index)\n\n项目github地址：[MiliMili项目地址](https://github.com/Jeffrey-0/MovieOnline)\n\n<!-- more -->\n\n## 项目简介\n\n咪哩咪哩免费提供用户观看各种视频资源，影视番剧，同时也有论坛区提供用户与用户之间交流，Up主可上传自制视频或者搬运其他视频。咪哩咪哩用于分享各种视频、影视番剧，现受广大用户青年的热爱与青睐，主要是用来休闲娱乐的一个网站。\n\n## 功能模块\n\n> 主页  分类  搜索   视频播放   论坛   我的视频  上传视频  注册登录\n\n## 开发环境\n\n- 操作系统：Windows 10\n- 编程语言: Java 1.8\n- 开发工具: IDEA、Navicat 、Git（非必须）\n- 服务器：Tomcat 8.0\n- 数据库: MySQL\n- 代码托管平台: GitHub（非必须）\n\n## 部署步骤\n\n**数据库配置**\n\n1. 新建一个webstore数据库，将项目中的 `webstore.sql`导入到webstore数据库中\n2. 修改 `src/druid.properties`中username和password\n\n**idea导入项目**[参考](https://www.cnblogs.com/qingyunfc/p/10284230.html)\n\n1. 导入项目\n2. 配置Project Structure\n3. 配置Tomcat\n\n## 目录结构\n\n├─ out\n\n├─ src\n\n│  ├─ dao  //数据接口\n\n│  ├─ model    //项目模型\n\n│  ├─ servlet       //存放所有的servlet\n\n│  ├─ test \n\n│  ├─ utils  //JDBC\n\n│  └─ druid.properties //数据库连接参数\n\n├─ web\n\n│  ├─ assets2\n\n│  ├─ css //css文件\n\n│  ├─ img  //图片资源路径\n\n│  ├─ js //js文件\n\n│  ├─ WEB-INF // 依赖包\n\n│  └─ *.jsp    //所有jsp页面\n\n├─ .gitignore  // git忽略文件\n\n├─ README.md\n\n├─ sharee.iml\n\n└─ webstore.sql    //数据库结构和数据\n\n\n\n## 贡献者\n\n<a href=\"https://github.com/Jeffrey-0\"><img src=\"https://avatars0.githubusercontent.com/u/49424740?s=460&u=d3de943acc254c684bf42054596b5351e762cffd&v=4\" width=\"50px\"></a><a href=\"https://github.com/Aiiiiiiiiiiii\"><img src=\"https://avatars1.githubusercontent.com/u/54297514?s=460&v=4\" width=\"50px\"></a>\n\n","tags":["Bootstrap","JavaWeb","Vue"],"categories":["项目"]},{"title":"原生js实现图片懒加载","url":"/2020/05/11/2020-05-11-lazy-loading/","content":"\n\n\n原生js实现图片懒加载：lazy-loading\n\n演示demo地址：[图片懒加载效果演示](https://jeffrey-0.github.io/lazy-loading/index)\n\n项目地址：[图片懒加载](https://github.com/Jeffrey-0/lazy-loading)\n\n<!-- more -->\n\n## 快速开始\n\nHTML结构\n\n```html\n<img data-src=\"img/1.jpg\" data-img=\"false\">\n```\n\nJS脚本\n\n```html\nvar ele = document.getElementsByTagName('img')\nwindow.onscroll = function () {\n  var t = document.documentElement.scrollTop || document.body.scrollTop\n  for (var i = 0; i < ele.length; i++) {\n    if ((ele[i].offsetTop + ele[i].parentNode.offsetTop) <= t + window.innerHeight && ele[i].dataset.img === 'false') {\n      ele[i].src = ele[i].dataset.src\n      ele[i].dataset.img = true\n    }\n  }\n}\nwindow.onscroll()\n```\n\n## 兼容性\n\n- 兼容谷歌、火狐、IE等主流浏览器以及手机端\n\n","tags":["JavaScript"],"categories":["项目"]},{"title":"图片随鼠标滑动效果","url":"/2020/05/05/2020-05-05-mouse-slide/","content":"\n原生js实现图片随鼠标滑动效果：mouse-slide\n\n演示demo地址：[鼠标滑动效果演示](https://jeffrey-0.github.io/mouse-slide/)\n\n项目地址：[鼠标滑动效果](https://github.com/Jeffrey-0/mouse-slide)\n\n<!-- more -->\n\n\n## 快速开始\n\nCSS样式\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://jeffrey-0.github.io/mouse-slide/index.css\">\n```\n\nHTML结构\n\n```html\n<div class=\"item\">\n  <img src=\"img/1.jpg\" alt=\"\">\n  <div class=\"\">显示标题</div>\n</div>\n```\n\nJS脚本\n\n```html\n<!-- 引入mouse-slide插件 -->\n<script type=\"text/javascript\" src=\"https://jeffrey-0.github.io/mouse-slide/index.js\"></script>\n<!-- 使用slider插件 -->\n<script type=\"text/javascript\">\n  mouseSlide('item', 500)\n  // 参数1： className 要滑动的div的父级类名，默认为item\n  // 参数2： animationDuration 滑动的时间/单位毫秒，默认为500\n</script>\n```\n\n> 第二种：建议下载本项目[鼠标滑动效果](https://github.com/Jeffrey-0/mouse-slide)到本地，再引入，加快速度\n\n## 兼容性\n\n* 兼容谷歌、火狐、IE9+等主流浏览器(IE9及以下只显示不滑动)\n","tags":["CSS","JavaScript"],"categories":["项目"]},{"title":"正则表达式","url":"/2020/05/04/2020-05-04-Regex/","content":"\n\n\n学习视频：[正则表达式](https://biaoyansu.com/28.x)\n\n## 通配\n\n| 符号            | 描述                                 |\n| --------------- | ------------------------------------ |\n| .               | 匹配任意一个非断行字符               |\n| \\w  (\\W)        | 匹配(非）字母，数字，_               |\n| \\d  (\\D)        | 匹配(非)阿拉伯数字                   |\n| \\s  (\\S)        | 匹配(非)空白字符                     |\n| [a-z0-9]        | 字符集合，匹配a-z和0-9中任意一个字符 |\n| [\\u4e00-\\u9fa5] | 汉字字符集合                         |\n\n<!-- more -->\n\n## 次数\n\n| 符号  | 描述                      |\n| ----- | ------------------------- |\n| +     | 重复一次或多次            |\n| *     | 零次或多次                |\n| ？    | 零个或一个                |\n| {a,b} | a到b次                    |\n| {a}   | 重复a次                   |\n| {a, } | 至少a次                   |\n| +？   | +的懒惰模式，尽可能少匹配 |\n| *？   | * 的懒惰模式              |\n| ？？  | ？的懒惰模式              |\n\n## 边界\n\n| 符号 | 描述             |\n| ---- | ---------------- |\n| ^    | 行首或字符串开始 |\n| $    | 行末或字符串结束 |\n| \\b   | 单词边界         |\n| \\B   | 非单词边界       |\n\n## 预查(xxx代表条件)\n\n| 符号               | 描述         |\n| ------------------ | ------------ |\n| (xxx)     $1       | 分组匹配     |\n| (?:xxx )  $1       | 只匹配不捕获 |\n| (?=xxx)   (?!xxx)  | 正向预查     |\n| (?<=xxx)  (?<!xxx) | 反向预查     |\n\n## 常用正则表达式\n\n| 说明           | 正则表达式                                                   |\n| -------------- | ------------------------------------------------------------ |\n| 用户名         | `^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$`                           |\n| 手机号         | `^1[34578]\\d{9}$`                                            |\n| QQ号           | `^[1-9][0-9]{4,}$`                                           |\n| 邮箱           | `^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`              |\n| 邮箱           | `^[\\w\\-\\\\.]+@[\\w\\\\-]+(?:\\.[\\w]{2,}){1,3}$`                   |\n| 18位身份证号码 | `^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(1[012]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$` |\n| 日期格式       | `^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$`           |\n| InternetURL    | `[a-zA-Z]+://[^\\s]*`                                         |\n| InternetURL    | `^https?://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$`               |\n\n## 使用\n\n- 正则表达式.test(字符串)    -> 返回true或false\n- 字符串.match(正则表达式)    ->返回符合条件的所有子串","tags":["course","JavaScript"],"categories":["笔记"]},{"title":"3D旋转轮播图","url":"/2020/05/02/2020-05-02-3D-slider/","content":"\n自制的jQuery插件：3D-slider\n\n演示demo地址：[3D旋转轮播图演示](https://jeffrey-0.github.io/3D-slider/3D旋转轮播.html)\n\n项目github地址：[3D旋转轮播图](https://github.com/Jeffrey-0/3D-slider)\n\n<!-- more -->\n\n## 功能\n\n- 3D旋转效果\n- 自动轮播\n- 点击切换当前图片\n- 点击当前图片跳转链接\n- 鼠标悬停停止自动轮播\n- 自适应各种图片（最大等比例+居中裁切）\n\n## 快速开始\n\nCSS样式\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://jeffrey-0.github.io/3D-slider/3D-slider.css\">\n```\n\nHTML结构\n\n```html\n<!-- #替换成想要跳转的地址 -->\n<div id=\"wrapper\" class=\"wrapper\">\n    <a href=\"#\"><img src=\"https://jeffrey-0.github.io/3D-slider/img/1.jpg\" alt=\"火影\"></a>\n    <a href=\"#\"><img src=\"https://jeffrey-0.github.io/3D-slider/img/2.jpg\" alt=\"海贼王\"></a>\n    <a href=\"#\"><img src=\"https://jeffrey-0.github.io/3D-slider/img/3.jpg\" alt=\"全职高手\"></a>\n</div>\n```\n\nJS脚本\n\n```html\n<!-- 引入jquery -->\n<script type=\"text/javascript\" src=\"https://jeffrey-0.github.io/3D-slider/jquery.min.js\"></script>\n<!-- 引入slider插件 -->\n<script type=\"text/javascript\" src=\"https://jeffrey-0.github.io/3D-slider/3D-slider.js\"></script>\n<!-- 使用slider插件 -->\n<script>\n      if (screen.width > 767 ) {\n        // 适配pc端\n        $('#wrapper').slider({\n          curDisplay: 0, // 当前显示第n张图片\n          autoPlay: true, // 是否自动轮播\n          interval: 2000, // 轮播的时间，单位：毫秒\n          translateX: 200, // 图片向俩边平移的距离，单位：px\n          translateZ: 300, // 图片向前平移的距离，单位：px\n          rotateY: 30  // 图片的偏移角度，单位：deg\n        })\n      } else {\n        // 适配手机端\n        $('#wrapper').slider({\n          curDisplay: 0,\n          autoPlay: true,\n          interval: 2000,\n          translateX: 50,\n          translateZ: 100,\n          rotateY: 30\n        })\n      }\n  </script>\n```\n\n> 第二种：建议下载本项目[3D旋转轮播图](https://github.com/Jeffrey-0/3D-slider)到本地，再引入，节省时间\n\n## 选项\n\n这些选项均有默认值，可根据自己喜好配置不同值\n\n| 选项       | 类型    | 默认 | 描述                           |\n| ---------- | ------- | ---- | ------------------------------ |\n| curDisplay | Number  | 0    | 当前显示第n张图片              |\n| autoPlay   | Boolean | true | 是否自动轮播                   |\n| interval   | Number  | 2000 | 轮播的时间，单位：毫秒         |\n| translateX | Number  | 200  | 图片向俩边平移的距离，单位：px |\n| translateZ | Number  | 300  | 图片向前平移的距离，单位：px   |\n| rotateY    | Number  | 30   | 图片的偏移角度，单位：deg      |\n\n> 如果你不想要点击当前图片跳转链接，可以设置a标签中的`href`为`javascript:;`\n\n## 兼容性\n\n- 兼容主流浏览器 + 移动端\n- 本插件使用的jQuery为[jQuery3.5.0版本](https://cdn.bootcdn.net/ajax/libs/jquery/3.5.0/jquery.min.js)\n\n","tags":["CSS","jQuery"],"categories":["项目"]},{"title":"ES6精讲","url":"/2020/05/01/2020-05-01-ES6/","content":"\n学习视频：[ES6精讲](https://biaoyansu.com/i/65930214353131?rd=https://biaoyansu.com/7.10)\n\n## let\n\n- 不可以重复声明\n- 无声明提升\n- 块级作用域\n\n<!-- more -->\n\n## const\n\n- 声明时必须赋值\n- 不可以重新赋值\n- 无声明提升\n- 块级作用域\n\n## 变量的解构赋值\n\n**数组**\n\n```js\nvar [a, b, c] = [1, 2, 3]\n// a:1  b:2  c:3\nvar [a, b, c] = [1, 2]\n// a:1  b:2  c:undefined\nvar [a, ...c] = [1, 2, 3]\n// a:1   c:[2, 3]\nvar [a, b, c = 5] = [1, 2]\n// a:1  b:2  c:5\nvar [a, , c] = [1, 2, 3];\n// a:1  c:3\n```\n\n**对象**\n\n```js\nvar obj = {\n  a: 1,\n  b: 2\n}\nlet {a: A, b, c = 3 ,d} = obj\nconsole.log(A, b, c, d)\n//-> 1, 2, 3, undefined\nlet {floor, pow} = Math\nconsole.log(floor(1.9), pow(2, 3));\n//-> 1, 8\n```\n\n**其他**\n\n- 获取字符串的长度:`let {length} = 'yo.'`\n- 拆解字符串:`let [a, b, c] = 'yo.'`\n- 数组形参、对象形参:`function test ([a, b])`\n\n## 字符串方法\n\n- includes  包含子串\n- startsWith 以...开头\n- endsWith  以...结尾\n- repeat(n)  重复n次\n\n## 模板字符串\n\n```js\nvar title = '野外基地'\nvar tpl = `\n<div>\n  <span>${title + `\n    <div>${1234}</div>\n    `}</span>\n</div>`;\n```\n\n## Symbol数据类型\n\n```js\nlet name = Symbol()\n{\n  var person = {}\n  person[name] = 'File1'\n  console.log(person[name])\n  //-> File1\n}\n{\n  let name = Symbol()\n  person[name] = 'File2'\n  console.log(person[name])\n  //-> File2\n}\nconsole.log(person[name]);\n//-> File1\n```\n\n## proxy\n\n```js\nvar user = new Proxy({}, {\n  get: function (obj, prop) {\n    if (prop === 'full_name') {\n      return obj.fname + ' ' + obj.lname\n    }\n  }\n})\nuser.fname = 'Bob'\nuser.lname = 'Wood'\nconsole.log('user.full_name:', user.full_name);\n//-> Bob Wood\n```\n\n## set \n\n去除重复的值，只保留一个\n\n- `var s = new Set([1, 2, 3, 3])`\n- size()  长度\n- add()  添加\n- delete()  删除\n- has()   是否拥有\n- clear()  清除","tags":["course","JavaScript"],"categories":["笔记"]},{"title":"玩转jQuery-表严肃","url":"/2020/05/01/2020-05-01-jQuery/","content":"\n学习视频：[玩转jQuery-表严肃](https://biaoyansu.com/16.2)\n\n<!-- more -->\n\n## 选择器\n\n* 标签选择器 $(demo)\n* id选择器 $(#demo)\n* class选择器 $(.demo)\n* 属性选择器 $([class='demo'])\n* 伪类选择器 $(demo:first)\n## 过滤器\n* 同级元素 filter(必须有选择器)\n* 后辈元素 find(必须有选择器)\n* 父元素 parent()\n* 先辈元素 parents()\n## 操作样式\n* 属性\n  * css('属性名','属性值')\n  * css({属性名: '属性值', 属性名: '属性值'})\n* 类名\n  * addClass 增加类名\n  * removeClass 删除类名\n  * hasClass 检查类名\n* 显示/隐藏\n  * show 显示\n  * hide 隐藏\n  * fadeOut(n) n毫秒淡出\n  * fadeIn(n) n毫秒淡入\n  * slideUp(n) n毫秒向上缩隐\n  * slideDown(n) n毫秒向下显现\n## 操作DOM\n* text()  文本\n* html()  包含标签、文本\n* append() 追加最后一个子元素\n* prepend() 追加第一个子元素\n* remove() 删除某个元素\n## 事件\n` Node.on('事件', fun()) `\n* click 点击\n* dblclick 双击\n* mouseenter 鼠标移入\n* mouseleave 鼠标移出\n## 操作元素属性\n* attr(属性, 值)  显现属性\n* prop(属性, 值)  隐性DOM属性\n* removeAttr(属性)  删除属性\n## 表单及输入\n* val()  值\n* focus() 聚焦\n* blur() 不聚焦\n* select() 全选\n* form.submit() 提交\n## Ajax\n```js\n$.ajax({\n  url: ,\n  method: 'get',\n  success: function (data) {\n  },\n  error: function (err) {\n  }\n});\n```\n* $.get(url, data, callback)\n* $.post(url, data, callback, type)\n* $.getJSON(url, data, callback)","tags":["course","JavaScript","jQuery"],"categories":["笔记"]},{"title":"3D魔方相册","url":"/2020/04/29/2020-04-29-3D-Album/","content":"\nHTML5+CSS3实现3D魔方相册\n\ndemo地址：[3D魔方相册演示](https://jeffrey-0.github.io/3D-Album/3D魔方相册.html)\n\ngithub地址：[3D魔方相册github地址](https://github.com/Jeffrey-0/3D-Album)\n\n<!-- more -->\n\n## 安装\n\n```shell\n$ git clone git@github.com:Jeffrey-0/3D-Album.git\n```\n\n或者\n\n打开[3D魔方相册github地址](https://github.com/Jeffrey-0/3D-Album)直接克隆到本地\n\n## 配置\n\n<mark>直接更换img文件夹中的图片</mark>\n\n如果想要其他效果，可以更改如下属性\n\n| 属性        | 描述           |\n| ----------- | -------------- |\n| perspective | 视角距离       |\n| animation   | 动画属性       |\n| transition  | 过渡效果       |\n| opacity     | 透明度         |\n| transform   | 元素2D或3D转换 |\n\n## 使用\n\n在浏览器中打开`3D魔方相册.html`文件\n\n\n\n","tags":["HTML","CSS"],"categories":["项目"]},{"title":"HTML5新特性","url":"/2020/04/29/2020-04-29-html5/","content":"\n\n\n## 新元素\n\n**新的语义和结构元素**\n\n| 标签       | 描述                                                 |\n| ---------- | ---------------------------------------------------- |\n| article    | 页面独立的内容区域                                   |\n| aside      | 侧边栏                                               |\n| bdi        | 一段文本、使其脱离父元素的文本方向位置               |\n| command    | 命令按钮，如单选/复选按钮                            |\n| details    | 描述文档                                             |\n| dialog     | 对话框                                               |\n| summary    | 标签包含details元素的标题                            |\n| figure     | 规定独立的流内容（图片、图表、照片、代码等）         |\n| figcaption | 定义figure元素的标题                                 |\n| footer     | section或document的页脚                              |\n| header     | 文档的头部内容                                       |\n| mark       | 带有记号的文本                                       |\n| meter      | 定义度量衡                                           |\n| nav        | 导航链接的部分                                       |\n| progress   | 任务的进度                                           |\n| ruby       | 定义rudy注释                                         |\n| rt         | 字符的解释或发音                                     |\n| rp         | 在ruby注释中使用，定义不支持ruby的浏览器所显示的内容 |\n| section    | 定义文档中的节                                       |\n| time       | 日期或时间                                           |\n| wbr        | 文本中何处适合添加换行符                             |\n| canvas     | 标签定义图形，比如图表和其他图像                     |\n\n<!-- more -->\n\n**新多媒体元素**\n\n| 标签   | 描述                                 |\n| ------ | ------------------------------------ |\n| audio  | 音频                                 |\n| video  | 视频                                 |\n| source | audio、video多媒体资源               |\n| embed  | 嵌入的内容，如插件                   |\n| track  | 为audio和video的媒介规定外部文本轨道 |\n\n**新表单元素**\n\n| 标签     | 描述                           |\n| -------- | ------------------------------ |\n| datalist | 与input配合，定义input可能的值 |\n| keygen   | 表单的密钥对生成器字段         |\n| output   | 定义不同类型的输出             |\n\n**移除的元素**\n\n以下的HTML4.01元素在HTML5已经被删除\n\n| acronym  | applet | basefont |\n| -------- | ------ | -------- |\n| big      | center | dir      |\n| font     | frame  | frameset |\n| noframes | strike | tt       |\n\n## 视频-video\n\n| 属性     | 值       | 描述                                                         |\n| -------- | -------- | ------------------------------------------------------------ |\n| width    | px       | 宽度                                                         |\n| height   | px       | 高度                                                         |\n| src      | url      | 视频地址                                                     |\n| controls | controls | 出现控件                                                     |\n| autoplay | autoplay | 自动播放，不兼容很多浏览器，可配合muted静音而生效            |\n| loop     | loop     | 循环播放                                                     |\n| preload  | preload  | 页面加载时进行加载，预备播放，如果有“autoplay\",则忽略此属性。 |\n| muted    | muted    | 静音                                                         |\n\n```html\n <video  loop muted autoplay src=\"http://vfx.mtime.cn/Video/2019/03/19/mp4/190319222227698228.mp4\" width=\"600px\"  controls=\"controls\"  preload=\"preload\"></video>\n```\n\n\n\n## 音频-audio\n\n| 属性     | 值       | 描述                                                         |\n| -------- | -------- | ------------------------------------------------------------ |\n| src      | url      | 音频地址                                                     |\n| controls | controls | 出现控件                                                     |\n| autoplay | autoplay | 自动播放，不兼容很多浏览器                                   |\n| loop     | loop     | 循环播放                                                     |\n| preload  | preload  | 页面加载时进行加载，预备播放，如果有“autoplay\",则忽略此属性。 |\n\n```html\n<audio src=\"李圣杰 - 手放开.mp3\"  controls=\"controls\" autoplay=\"autoplay\"></audio>\n```\n\n## 拖放\n\n```html\n<div id=\"box\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"></div>\n  <img draggable=\"false\" src=\"a.jpg\">\n  <img id=\"drag1\" draggable=\"true\" src=\"a.jpg\" ondragstart=\"drag(event)\">\n  <script type=\"text/javascript\">\nfunction allowDrop (event) {\n  event.preventDefault()\n  // 取消事件的默认行为\n}\n// 拖\nfunction drag (event) {\n  event.dataTransfer.setData('Text', event.target.id)\n}\n// 放  \nfunction drop (event) {\n  event.preventDefault()\n  var data = event.dataTransfer.getData('Text')\n  event.target.appendChild(document.getElementById(data))\n}\n  </script> \n```\n\n## 画布-canvas\n\n```html\n<canvas id=\"myCanvas\" width=\"200px\" height=\"100px\"></canvas>\n  <script type=\"text/javascript\">\n    var demo = document.getElementById('myCanvas')\n    var cxt = demo.getContext(\"2d\")\n    // HTML5内置对象\n    cxt.fillStyle = \"pink\"\n    // 规定颜色\n    cxt.fillRect(0, 0, 150, 75)\n    // 规定形状，位置，尺寸\n    // 从左上角（0， 0）开始绘制150*75的矩形\n  </script>\n```\n\n## 伸缩矢量图形-内联-svg\n\n```html\n  <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" height=\"190px\">\n    <polygon points=\"100,10 40,180 190,60 10,60 160,180\" style=\"fill:pink;stroke:#444;stroke-width:3;fill-rule:evenodd;\" />\n  </svg>\n```\n\n## 地理定位\n\n```js\n// 本地连接无效，需要https：//开头\nvar x=document.getElementById(\"demo\");\nfunction getLocation()\n  {\n  if (navigator.geolocation)\n    {\n  navigator.geolocation.getCurrentPosition(showPosition);\n    }\n  else{x.innerHTML=\"该浏览器不支持获取地理位置\";}\n  }\nfunction showPosition(position)\n  {\n  x.innerHTML=\"纬度: \" + position.coords.latitude + \n  \"<br />经度: \" + position.coords.longitude;\t\n  }\n```\n\n\n\n## Web存储\n\n- localStorage：没有时间限制的数据存储，关闭浏览器数据仍存在\n- sessionStorage：针对一个session的数据存储，关闭浏览器数据消失\n\n## Web Workers\n\nweb worker 是运行在后台的JavaScript，不会影响页面性能\n\n```html\n<!-- file:Web-Workers.html -->\n<script>\nvar w;\nfunction startWorker() {\n    if(typeof(Worker) !== \"undefined\") {\n        if(typeof(w) == \"undefined\") {\n            w = new Worker(\"demo.js\");\n        }\n        w.onmessage = function(event) {\n            document.getElementById(\"result\").innerHTML = event.data;\n        };\n    } else {\n        document.getElementById(\"result\").innerHTML = \"抱歉，你的浏览器不支持 Web Workers...\";\n    }\n}\nfunction stopWorker() \n{ \n    w.terminate();\n    w = undefined;\n}\n</script>\n```\n\n```js\n// file:demo.js\nvar i = 0\nfunction timedCount () {\n  i = i + 1\n  postMessage(i)\n  setTimeout('timedCount()', 500)\n}\ntimedCount()\n```\n\n## 表单\n\n**type输入类型**\n\n| 输入类型     | 描述                 |\n| ------------ | -------------------- |\n| email        | 邮箱地址             |\n| url          | 网址                 |\n| number       | 数字类型             |\n| range        | 数字的输入域，滑动条 |\n| Date pickers | 日期                 |\n| search       | 搜索                 |\n| color        | 颜色                 |\n\n**属性**\n\n| 属性           | 描述                                 |\n| -------------- | ------------------------------------ |\n| autocomplete   | from&input属性，自动填充             |\n| novalidate     | form属性，不验证                     |\n| autofocus      | 获取焦点                             |\n| height、width  | 只适用于image类型的input标签         |\n| list           | 选项列表                             |\n| min、max、step |                                      |\n| multiple       | 适用email和file类型的input标签，多值 |\n| pattern        | 模式，正则表达式                     |\n| placeholder    | 提示                                 |\n| required       | 提交时非空                           |\n\n","tags":["HTML","course"],"categories":["笔记"]},{"title":"响应式开发之Bootstrap","url":"/2020/04/25/2020-04-25-bootstrap/","content":"\n> 学习视频：[html响应式布局解析之pink老师]\n\n<!-- more -->\n\n## 响应式尺寸\n\n| 屏幕                   | 尺寸范围   | 通常设置 |\n| ---------------------- | ---------- | -------- |\n| 超小屏幕（手机）       | < 768px    | 100%     |\n| 小屏幕（平板）         | \\>= 768px  | 750px    |\n| 中等屏幕（桌面显示器） | \\>=  992px | 970px    |\n| 大屏幕（大桌面显示器） | \\>= 1200px | 1170px   |\n\n## 原始方法\n\n<mark>都要在头文件中添加，适配手机端</mark>\n\n```html\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale = 1.0\">\n```\n\n- 第一种：在style中设置\n\n```html\n  <style type=\"text/css\">\n    @media(min-width:400px) and (max-width: 600px){\n      div{\n        background: #f00;\n      }\n    }\n    @media(min-width:600px) and (max-width: 800px){\n      div{\n        background: #0f0;\n      }\n    }\n  </style>\n```\n\n- 第二种：引入外部css\n\n```html\n<link href=\"文件名1\" media=\"(min-width=500px) and (max-width=800px)\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"文件名2\" media=\"(min-width=800px) and (max-width=1200px)\" rel=\"stylesheet\" type=\"text/css\">\n<link href=\"文件名3\" media=\"(min-width=1200px) \" rel=\"stylesheet\" type=\"text/css\">\n```\n\n## Bootstrap栅栏系统\n\n### \n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title>模拟响应式</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"bootstrap-3.3.7/css/bootstrap.min.css\">\n  <style type=\"text/css\">\n    div{\n      border: #f00 solid 1px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">1</div>\n      <div class=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">2</div>\n      <div class=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">3</div>\n      <div class=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">4</div>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n### 嵌套\n\n```html\n<div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">\n        <div class=\"row\">\n          <div class=\"col-lg-4\">1</div>\n          <div class=\"col-lg-4\">2</div>\n          <div class=\"col-lg-4\">3</div>\n        </div>\n      </div>\n    </div>\n</div>\n```\n\n### 列排序push/pull\n\n```html\n<div class=\"row\">\n      <div class=\"col-lg-4 col-lg-push-8\">1</div>\n      <div class=\"col-lg-8 col-lg-pull-4\">2</div>\n</div>\n```\n\n### 列偏移offset\n\n```html\n<div class=\"col-lg-4 col-lg-offset-4\"></div>\n```\n\n### 隐藏hidden\n\n```html\n<div class=\"col-lg-4 hidden-md\">2</div>\n```\n\n---\n\n> 学习视频[玩转Bootstrap-表严肃]\n\n## 按钮 \n\n**样式**\n\n| 类名        | 功能      |\n| ----------- | --------- |\n| btn         | 声明按钮  |\n| btn-default | 默认 灰白 |\n| btn-primary | 主要 深蓝 |\n| btn-success | 成功 浅绿 |\n| btn-danger  | 危险 淡红 |\n| btn-info    | 信息 浅蓝 |\n| btn-warning | 警告 浅黄 |\n\n**大小**\n\n| 类名   | 功能     |\n| ------ | -------- |\n| btn-lg | 大       |\n| 空     | 默认、中 |\n| btn-sm | 小       |\n| btn-xm | 超小     |\n\n**按钮组**\n\n| 类名               | 功能       |\n| ------------------ | ---------- |\n| btn-group          | 水平按钮组 |\n| btn-group-vertical | 垂直按钮组 |\n| btn-toolbar        | 嵌套按钮组 |\n\n## 表单form\n\n```html\n  <form class=\"container\">\n    <div class=\"form-group\">\n      <label class=\"control-label\">用户名</label>\n      <input class=\"form-control\" type=\"text\" name=\"username\">\n    </div>\n<!-- 前置图标 -->\n    <div class=\"input-group\">\n      <div class=\"input-group-addon\">￥</div>\n      <input class=\"form-control\" type=\"text\"></input>\n    </div>\n  </form>\n```\n\n## 导航\n\n| 类名          | 作用       |\n| ------------- | ---------- |\n| nav           | 声明导航   |\n| nav-tabs      | 标签导航   |\n| nav-pills     | 胶囊式导航 |\n| nav-justified | 平分宽度   |\n| nav-stacked   | 竖形       |\n\n## 导航栏\n\n```html\n <div class=\"container\">\n    <div class=\"navbar navbar-default\">\n    <div class=\"navbar-header\">\n      <a href=\"/\" class=\"navbar-brand\">首页</a>\n      <a href=\"/\" class=\"navbar-brand\">产品</a>\n    </div>\n        \n    <form class=\"navbar-form navbar-left\">\n      <div class=\"form-group\">\n        <input type=\"text\" name=\"\" class=\"form-control\">\n      </div>\n      <button type=\"submit\" name=\"搜索\" class=\"btn btn-default\">搜索</button>\n     </form>\n        \n    <div class=\"navbar-header navbar-right\">\n      <a href=\"\" class=\"navbar-brand\">登录</a>\n      <a href=\"\" class=\"navbar-brand\">注册</a>\n    </div>\n  </div>\n  </div>\n```\n\n## 面板\n\n| 类名          | 作用     |\n| ------------- | -------- |\n| panel         | 声明面板 |\n| panel-default | 默认面板 |\n| panel-success | 绿色面板 |\n| panel-heading | 面板头部 |\n| panel-body    | 面板身体 |\n| panel-footer  | 面板底部 |\n\n## 表格\n\n| 类名           | 作用       |\n| -------------- | ---------- |\n| table          | 声明表格   |\n| table-striped  | 黑白相间   |\n| table-hover    | 鼠标位变色 |\n| table-bordered | 加边框     |\n\n## 分页\n\n| 类名       | 作用     |\n| ---------- | -------- |\n| pagination | 分页     |\n| pager      | 上下页   |\n| active     | 当前击中 |\n| disabled   | 不可点击 |\n\n## 路径导航\n\n```html\n<div class=\"breadcrumb\">\n    <li><a href=\"\">首页</a></li>\n    <li><a href=\"\">文章</a></li>\n    <li class=\"active\"><span >helloworld</span>\n</div>\n```\n\n## 标签\n\n```html\n<p>\n  <label class=\"label label-success\">有趣</label> \n  <label class=\"label label-success\">有趣</label> \n  <label class=\"label label-success\">有趣</label> \n</p>\n```\n\n## 数字统计(点赞数)\n\n```html\n<button class=\"btn btn-success\">\n    赞<span class=\"badge\">20</span>\n</button>\n```\n\n## 弹出框\n\n```html\n<div class=\"alert alert-danger\">\n        危险\n</div>\n```\n\n## 列表组\n\n```html\n<div class=\"list-group\">\n  <a href=\"\" class=\"list-group-item\">123</a>\n  <a href=\"\" class=\"list-group-item\">123</a>\n</div>\n```\n\n\n\n[玩转Bootstrap-表严肃]: https://biaoyansu.com/14.1\n[html响应式布局解析之pink老师]: https://www.bilibili.com/video/BV1GJ411n7nq","tags":["course","Bootstrap"],"categories":["笔记"]},{"title":"git常用命令","url":"/2020/04/22/2020-04-22-git-command/","content":"\n\n\n本文转自[Git常用命令及方法大全]，不过由于里面命令太多，着重挑选了我认为较常用的，虽然也不少\n\n\n\n## 新建代码库\n\n```shell\n# 在当前目录新建一个Git代码库\n$ git init \n\n# 下载一个远程项目\n$ git clone [url]\n```\n<!-- more -->\n## 配置\n\n```shell\n# 显示当前的git配置\n$ git config --list\n\n# 设置提交代码时的用户信息（通常设置全局--global）\n$ git config --global user.name \"name\"\n$ git config --global user.email \"email address\"\n```\n\n## 增加删除文件\n\n```shell\n#  添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录所有文件到暂存区\n$ git add .\n\n# 删除工作区文件，并将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 删除暂存区中的文件，但该文件会保留在工作区\n$ git rm --cache [file]\n\n# 改名文件，并放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n## 代码提交\n\n```shell\n# 提交暂存区到本地仓库区，message：备注\n$ git commit -m [message]\n\n# 使用新的commit，替代上一次提交\n$ git commit --amend -m [message]\n```\n\n## 分支\n\n```shell\n# 列出所有本地分支\n$ git branch \n\n# 列出所有远程分支\n$ git branch -r \n\n# 列出所有本地分支和远程分支\n$ git branch -a \n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n#切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 合并指定分区到当前分区\n$ git merge [branch]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n# 切换分支后直接不能直接git push\n$ git push --set-upstream origin [branch-name]\n```\n\n## 标签\n\n```shell\n# 列出所有tag\n$ git tag\n\n# 新建一个tag 在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git tag -d [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n```\n\n## 查看信息\n\n```shell\n# 显示有变更的文件\n$ git status\n\n# 显示当给前分支的版本历史\n$ git log\n\n# 显示commit历史\n$ git log --stat\n\n# 信息太多，按Q可以退出log\n```\n\n## 远程同步\n\n```shell\n# 下载远程仓库所有改动\n$ git fetch [remote]\n\n# 将本地仓库和远程仓库关联\n$ git remote add orign [url]\n\n# 取回远程仓库的变化，并和本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n## 撤销\n\n```shell\n# 恢复暂存区的指定文件到工作区\n$ git checkout -- [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区和工作区，与上次commit保持一致\n$ git reset --hard\n\n```\n\n## 版本回退和撤销（重点）\n\n```shell\n# 工作区修改，但是未add，想恢复工作区的文件\n$ git checkout -- [file]\n\n# 工作区修改，未add，恢复工作区文件\n# 工作区修改+add，清空暂存区中某个文件\n$ git restore [file]\n\n# 工作区修改+add，未commit，清空暂存区中某个文件\n$ git reset HEAD [file] \n\n# 工作区修改+add，未commit，清空暂存区并还原工作区\n$ git reset --hard\n\n# 已经commit或push了\n# 先查看日志，看看自己要回到版本几，~1表示回退上个版本,还原三区（本地仓库、缓存区、工作区）\n$ git log --pretty=oneline\n$ git reset --hard HEAD~1\n\n# 恢复文件后又想回到修改后的文件.\n$ git log --pretty=oneline\n$ git reset --hard [commit_id]\n\n```\n\n[Git常用命令及方法大全]:https://blog.csdn.net/web_csdn_share/article/details/79243308\n\n","tags":["小技巧","git"],"categories":["笔记"]},{"title":"免费翻墙超简教程","url":"/2020/04/21/2020-04-21-over-the-wall/","content":"\n\n## [Baacloud] (推荐)\n\n* 直接去Baacloud官网，注册一个账号，然后下载客户端软件就可以用了\n* 初始有免费的2G流量，每日签到可以领取流量\n* 一开始俩个免费节点都用不了，提示“连接已被服务器放弃”，过来一会等我测试完下面`佛跳墙`成功翻墙后，第一个免费节点就连接成功了（不知这俩件事有没有联系）\n* 网络可能不稳定，卡顿的时候可以重启试试（感谢舍友的推荐）\n\n<!-- more -->\n\n## [佛跳墙]\n\n* 直接去官网下载，连注册都可以不用，下载后直接打开，就可以用了\n* 免费版（限速 20 KB/S），初始有100M的高速流量体验\n\n## <font color='red'>以下几种方法要先下载一个SSR软件</font>[小飞机]\n\n## [免费节点]\n\n> 这个方法我认为是这几种中最好的，但是听说要翻墙后才能访问，不过我的电脑在不翻墙情况也能访问，不知道之前是不是配置过其他东西。不过不用担心，你可以用上面的'佛跳墙'先翻墙后再来访问，当然，下面也有在不翻墙的情况也能访问该网站的方法\n\n**不翻墙的情况访问本站(如果能访问，请忽略)**\n\n1. 目录：C:/Windows/System32/drivers/etc，记事本打开hosts文件\n2. 在最后一行添加(中间空格)：` 162.159.210.92 lncn.org`\n3. win+R 输入cmd回车，执行：`ipconfig /flushdns`\n4. 重新刷新页面即可,如失效请还原hosts并用代理访问！\n\n**可以访问该站后，使用方法**\n\n1. 访问该网站，首先人机验证\n2. 复制节点\n3. 打开小飞机软件，右击，点击剪切板批量导入\n4. 这时会弹出小飞机软件的界面，选择其中一个节点，记住节点名称，后面要用到，\n5. 点击确定\n6. 右击小飞机\n7. 移动到服务器这个选项\n8. 选择Lncn.org\n9. 这时会弹出你导入的所有节点，选择步骤4你选择的节点名称，就大功告成了\n10. 可以试着去访问一些被墙的网站，如[谷歌]，如果还是无法访问，就切换其他节点试试\n\n![img](/assets/img/blog/over-the-wall/免费节点.png)\n\n![img](/assets/img/blog/over-the-wall/免费节点2.jpg)\n\n![img](/assets/img/blog/over-the-wall/免费节点3.jpg)\n\n\n\n## [FreeSS]\n\n1. 选择SSR\n2. 点击其中一张图片，此时弹出一个二维码\n3. 右击小飞机，点击二维码扫描\n4. 切换刚才添加的服务器节点\n\n![img](/assets/img/blog/over-the-wall/FreeSS.jpg)\n\n## [免费上网账号]\n\n如果你是用SSR小飞机，使用下面的免费S账号，选择其中一个点击二维码，操作如上\n\n## [SSR]（推荐）\n\n这里有很多免费节点，可查看状态和延迟，不过没有二维码，你可以打开小飞机手动编辑服务器\n\n****\n\n下面几种方式，是我在YouTube上看`冰河圈子`的[2020永远免费翻墙的方法之SSR篇]了解到的，特此鸣谢!\n\n\n\n[Baacloud]:https://www.baacloudhelp.com/\n[佛跳墙]:https://www.juhetechnews.com/cn/#zero\n[小飞机]:https://garygeng.com/others/ssr-windows/\n[免费节点]:https://lncn.org/\n[免费上网账号]:https://free-ss.site/\n[FreeSS]:https://my.freeshadowsocks.org/\n[SSR]:https://ssrtool.us/tool/share_ssr\n[2020永远免费翻墙的方法之SSR篇]:https://www.youtube.com/watch?v=HIrlT3nOP4w\n[谷歌]:https://www.google.com/\n\n","tags":["小技巧","other"],"categories":["杂谈"]},{"title":"如何搭建一个自己的博客","url":"/2020/04/20/2020-04-20-bulid-blog/","content":"\n> 此文章是基于jekyll + githubPage搭建自己的博客，本站已从jekyll模板变更为hexo模板\n\n你可以在这里[jekyllthemes]寻找你自己喜欢的模板\n\n本文以我的旧模板[Hydejack]为例\n\n![img](../assets/img/blog/bulid-blog/hydejack.jpg)\n\n## 安装\n\n1. 进入模板的github地址[github_hydejack]\n2. 选择fork，将项目添加到自己的仓库,刷新一下页面，就可以看到该项目\n3. 在该项目的Settings中修改项目名Repository name为`你的用户名.github.io`，<font color='red'>这里的用户名全部写成小写,不然访问不了</font>\n4. 现在打开网址`https://你的用户名.github.io`就可以访问你的个人博客，但是里面的信息都是别人写好的，接下来就要修改成自己的信息\n\n## 配置\n\n**修改基本信息**\n\n```yaml\n#文件:  _config.yml\nurl:                   https://用户名.github.io/  \ntitle:                 用户名\t\t\t\t\t\t\ndescription:           >\n\t\t\t\t\t\t个性签名\ntagline:               >\n\nauthor:\n  name:                <用户名>\n  email:               <邮箱>\nmenu:\n  - title:             随笔（自定义）\n    url:               /hydejack/\n  - title:             项目（自定义）\n    url:               /hyde/\n  - title:             介绍（自定义）\n    url:               /docs/\n  - title:             About\n    url:               /about/\n```\n\n**修改头像**\n\n```text\n替换assets/icons/icon.png图片\n```\n\n**修改主页背景图**\n\n```text\n替换assets/img/sidebar-bg.jpg图片\n```\n\n## 发表第一篇博客HelloWorld\n\n* 首先先把`hydejack/_posts`文件夹中的所有文件删除\n\n* 在`hydejack/_posts`目录下新建一个文件`2020-04-20-hello-world.md`，文件命名规则`年-月-日-标题`\n\n* 输入以下信息。\n\n* ```markdown\n  ---\n  layout: post\n  title: HelloWorld\n  ---\n  HelloWorld!\n  ```\n\n* 成功提交后再次访问你的博客主页，就能看到你的第一篇博客HelloWorld了\n\n***\n\n如果你想了解更多,具体可以查看官方文档[Hydejack文档]\n\n本文借鉴视频：[基于 GitHub Pages 和 Jekyll 搭建个人博客的简单心得]\n\n\n\n[github_hydejack]:https://github.com/hydecorp/hydejack\n[jekyllthemes]:http://jekyllthemes.org/\n[Hydejack]:https://hydejack.com/\n[Hydejack文档]:https://hydejack.com/docs/\n[基于 GitHub Pages 和 Jekyll 搭建个人博客的简单心得]:https://www.bilibili.com/video/BV14x411t7ZU?from=search&seid=7479688014649782987","tags":["小技巧","Git"],"categories":["杂谈"]},{"title":"Hello-World","url":"/2020/04/19/2020-04-19-HelloWorld/","content":"\n","categories":["杂谈"]}]